// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddMargin extends ethereum.Event {
  get params(): AddMargin__Params {
    return new AddMargin__Params(this);
  }
}

export class AddMargin__Params {
  _event: AddMargin;

  constructor(event: AddMargin) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get margin(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newMargin(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newLeverage(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isFullClose(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get pnlIsNegative(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }

  get wasLiquidated(): boolean {
    return this._event.parameters[10].value.toBoolean();
  }
}

export class NewPosition extends ethereum.Event {
  get params(): NewPosition__Params {
    return new NewPosition__Params(this);
  }
}

export class NewPosition__Params {
  _event: NewPosition;

  constructor(event: NewPosition) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get oraclePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PositionLiquidated extends ethereum.Event {
  get params(): PositionLiquidated__Params {
    return new PositionLiquidated__Params(this);
  }
}

export class PositionLiquidated__Params {
  _event: PositionLiquidated;

  constructor(event: PositionLiquidated) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidatorReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get protocolReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get vaultReward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ProductAdded extends ethereum.Event {
  get params(): ProductAdded__Params {
    return new ProductAdded__Params(this);
  }
}

export class ProductAdded__Params {
  _event: ProductAdded;

  constructor(event: ProductAdded) {
    this._event = event;
  }

  get productId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get product(): ProductAddedProductStruct {
    return this._event.parameters[1].value.toTuple() as ProductAddedProductStruct;
  }
}

export class ProductAddedProductStruct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get maxExposure(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestLong(): BigInt {
    return this[5].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[6].toBigInt();
  }

  get interest(): i32 {
    return this[7].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[8].toI32();
  }

  get liquidationBounty(): i32 {
    return this[9].toI32();
  }

  get minPriceChange(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class ProductUpdated extends ethereum.Event {
  get params(): ProductUpdated__Params {
    return new ProductUpdated__Params(this);
  }
}

export class ProductUpdated__Params {
  _event: ProductUpdated;

  constructor(event: ProductUpdated) {
    this._event = event;
  }

  get productId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get product(): ProductUpdatedProductStruct {
    return this._event.parameters[1].value.toTuple() as ProductUpdatedProductStruct;
  }
}

export class ProductUpdatedProductStruct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get maxExposure(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestLong(): BigInt {
    return this[5].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[6].toBigInt();
  }

  get interest(): i32 {
    return this[7].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[8].toI32();
  }

  get liquidationBounty(): i32 {
    return this[9].toI32();
  }

  get minPriceChange(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class ProtocolFeeUpdated extends ethereum.Event {
  get params(): ProtocolFeeUpdated__Params {
    return new ProtocolFeeUpdated__Params(this);
  }
}

export class ProtocolFeeUpdated__Params {
  _event: ProtocolFeeUpdated;

  constructor(event: ProtocolFeeUpdated) {
    this._event = event;
  }

  get protocolRewardRatio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProtocolUpdated extends ethereum.Event {
  get params(): ProtocolUpdated__Params {
    return new ProtocolUpdated__Params(this);
  }
}

export class ProtocolUpdated__Params {
  _event: ProtocolUpdated;

  constructor(event: ProtocolUpdated) {
    this._event = event;
  }

  get protocol(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get stakeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shareBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get isFullRedeem(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get stakeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VaultUpdated extends ethereum.Event {
  get params(): VaultUpdated__Params {
    return new VaultUpdated__Params(this);
  }
}

export class VaultUpdated__Params {
  _event: VaultUpdated;

  constructor(event: VaultUpdated) {
    this._event = event;
  }

  get vault(): VaultUpdatedVaultStruct {
    return this._event.parameters[0].value.toTuple() as VaultUpdatedVaultStruct;
  }
}

export class VaultUpdatedVaultStruct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get lastCheckpointBalance(): BigInt {
    return this[4].toBigInt();
  }

  get lastCheckpointTime(): BigInt {
    return this[5].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[6].toBigInt();
  }

  get redemptionPeriod(): BigInt {
    return this[7].toBigInt();
  }

  get maxDailyDrawdown(): BigInt {
    return this[8].toBigInt();
  }
}

export class PikaPerpV2__getPositionResultPositionStruct extends ethereum.Tuple {
  get productId(): BigInt {
    return this[0].toBigInt();
  }

  get leverage(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get oraclePrice(): BigInt {
    return this[3].toBigInt();
  }

  get margin(): BigInt {
    return this[4].toBigInt();
  }

  get owner(): Address {
    return this[5].toAddress();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }

  get isLong(): boolean {
    return this[7].toBoolean();
  }
}

export class PikaPerpV2__getPositionsResult_positionsStruct extends ethereum.Tuple {
  get productId(): BigInt {
    return this[0].toBigInt();
  }

  get leverage(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get oraclePrice(): BigInt {
    return this[3].toBigInt();
  }

  get margin(): BigInt {
    return this[4].toBigInt();
  }

  get owner(): Address {
    return this[5].toAddress();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }

  get isLong(): boolean {
    return this[7].toBoolean();
  }
}

export class PikaPerpV2__getProductResultValue0Struct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get maxExposure(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestLong(): BigInt {
    return this[5].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[6].toBigInt();
  }

  get interest(): i32 {
    return this[7].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[8].toI32();
  }

  get liquidationBounty(): i32 {
    return this[9].toI32();
  }

  get minPriceChange(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class PikaPerpV2__getStakesResult_stakesStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get shares(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class PikaPerpV2__getVaultResultValue0Struct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get lastCheckpointBalance(): BigInt {
    return this[4].toBigInt();
  }

  get lastCheckpointTime(): BigInt {
    return this[5].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[6].toBigInt();
  }

  get redemptionPeriod(): BigInt {
    return this[7].toBigInt();
  }

  get maxDailyDrawdown(): BigInt {
    return this[8].toBigInt();
  }
}

export class PikaPerpV2__liquidatePositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PikaPerpV2 extends ethereum.SmartContract {
  static bind(address: Address): PikaPerpV2 {
    return new PikaPerpV2("PikaPerpV2", address);
  }

  MIN_MARGIN(): BigInt {
    let result = super.call("MIN_MARGIN", "MIN_MARGIN():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_MARGIN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_MARGIN", "MIN_MARGIN():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canLiquidate(positionId: BigInt): boolean {
    let result = super.call("canLiquidate", "canLiquidate(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(positionId)
    ]);

    return result[0].toBoolean();
  }

  try_canLiquidate(positionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canLiquidate", "canLiquidate(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(positionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPosition(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): PikaPerpV2__getPositionResultPositionStruct {
    let result = super.call(
      "getPosition",
      "getPosition(address,uint256,bool):((uint64,uint64,uint64,uint64,uint64,address,uint80,bool))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );

    return result[0].toTuple() as PikaPerpV2__getPositionResultPositionStruct;
  }

  try_getPosition(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): ethereum.CallResult<PikaPerpV2__getPositionResultPositionStruct> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(address,uint256,bool):((uint64,uint64,uint64,uint64,uint64,address,uint80,bool))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as PikaPerpV2__getPositionResultPositionStruct
    );
  }

  getPositionId(account: Address, productId: BigInt, isLong: boolean): BigInt {
    let result = super.call(
      "getPositionId",
      "getPositionId(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionId(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionId",
      "getPositionId(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositions(
    positionIds: Array<BigInt>
  ): Array<PikaPerpV2__getPositionsResult_positionsStruct> {
    let result = super.call(
      "getPositions",
      "getPositions(uint256[]):((uint64,uint64,uint64,uint64,uint64,address,uint80,bool)[])",
      [ethereum.Value.fromUnsignedBigIntArray(positionIds)]
    );

    return result[0].toTupleArray<
      PikaPerpV2__getPositionsResult_positionsStruct
    >();
  }

  try_getPositions(
    positionIds: Array<BigInt>
  ): ethereum.CallResult<
    Array<PikaPerpV2__getPositionsResult_positionsStruct>
  > {
    let result = super.tryCall(
      "getPositions",
      "getPositions(uint256[]):((uint64,uint64,uint64,uint64,uint64,address,uint80,bool)[])",
      [ethereum.Value.fromUnsignedBigIntArray(positionIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PikaPerpV2__getPositionsResult_positionsStruct>()
    );
  }

  getProduct(productId: BigInt): PikaPerpV2__getProductResultValue0Struct {
    let result = super.call(
      "getProduct",
      "getProduct(uint256):((address,uint72,uint16,bool,uint64,uint64,uint64,uint16,uint16,uint16,uint16,uint64))",
      [ethereum.Value.fromUnsignedBigInt(productId)]
    );

    return result[0].toTuple() as PikaPerpV2__getProductResultValue0Struct;
  }

  try_getProduct(
    productId: BigInt
  ): ethereum.CallResult<PikaPerpV2__getProductResultValue0Struct> {
    let result = super.tryCall(
      "getProduct",
      "getProduct(uint256):((address,uint72,uint16,bool,uint64,uint64,uint64,uint16,uint16,uint16,uint16,uint64))",
      [ethereum.Value.fromUnsignedBigInt(productId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as PikaPerpV2__getProductResultValue0Struct
    );
  }

  getStakes(
    stakeIds: Array<BigInt>
  ): Array<PikaPerpV2__getStakesResult_stakesStruct> {
    let result = super.call(
      "getStakes",
      "getStakes(uint256[]):((address,uint64,uint64,uint32)[])",
      [ethereum.Value.fromUnsignedBigIntArray(stakeIds)]
    );

    return result[0].toTupleArray<PikaPerpV2__getStakesResult_stakesStruct>();
  }

  try_getStakes(
    stakeIds: Array<BigInt>
  ): ethereum.CallResult<Array<PikaPerpV2__getStakesResult_stakesStruct>> {
    let result = super.tryCall(
      "getStakes",
      "getStakes(uint256[]):((address,uint64,uint64,uint32)[])",
      [ethereum.Value.fromUnsignedBigIntArray(stakeIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PikaPerpV2__getStakesResult_stakesStruct>()
    );
  }

  getVault(): PikaPerpV2__getVaultResultValue0Struct {
    let result = super.call(
      "getVault",
      "getVault():((uint96,uint96,uint64,uint64,uint80,uint80,uint32,uint32,uint32))",
      []
    );

    return result[0].toTuple() as PikaPerpV2__getVaultResultValue0Struct;
  }

  try_getVault(): ethereum.CallResult<PikaPerpV2__getVaultResultValue0Struct> {
    let result = super.tryCall(
      "getVault",
      "getVault():((uint96,uint96,uint64,uint64,uint80,uint80,uint32,uint32,uint32))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as PikaPerpV2__getVaultResultValue0Struct
    );
  }

  liquidatePosition(positionId: BigInt): PikaPerpV2__liquidatePositionResult {
    let result = super.call(
      "liquidatePosition",
      "liquidatePosition(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(positionId)]
    );

    return new PikaPerpV2__liquidatePositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_liquidatePosition(
    positionId: BigInt
  ): ethereum.CallResult<PikaPerpV2__liquidatePositionResult> {
    let result = super.tryCall(
      "liquidatePosition",
      "liquidatePosition(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(positionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PikaPerpV2__liquidatePositionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  liquidator(): Address {
    let result = super.call("liquidator", "liquidator():(address)", []);

    return result[0].toAddress();
  }

  try_liquidator(): ethereum.CallResult<Address> {
    let result = super.tryCall("liquidator", "liquidator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxShift(): BigInt {
    let result = super.call("maxShift", "maxShift():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxShift(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxShift", "maxShift():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextStakeId(): BigInt {
    let result = super.call("nextStakeId", "nextStakeId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextStakeId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextStakeId", "nextStakeId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openPosition(
    productId: BigInt,
    margin: BigInt,
    isLong: boolean,
    leverage: BigInt
  ): BigInt {
    let result = super.call(
      "openPosition",
      "openPosition(uint256,uint256,bool,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromUnsignedBigInt(margin),
        ethereum.Value.fromBoolean(isLong),
        ethereum.Value.fromUnsignedBigInt(leverage)
      ]
    );

    return result[0].toBigInt();
  }

  try_openPosition(
    productId: BigInt,
    margin: BigInt,
    isLong: boolean,
    leverage: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "openPosition",
      "openPosition(uint256,uint256,bool,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromUnsignedBigInt(margin),
        ethereum.Value.fromBoolean(isLong),
        ethereum.Value.fromUnsignedBigInt(leverage)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocol(): Address {
    let result = super.call("protocol", "protocol():(address)", []);

    return result[0].toAddress();
  }

  try_protocol(): ethereum.CallResult<Address> {
    let result = super.tryCall("protocol", "protocol():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolRewardRatio(): BigInt {
    let result = super.call(
      "protocolRewardRatio",
      "protocolRewardRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolRewardRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolRewardRatio",
      "protocolRewardRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdc(): Address {
    let result = super.call("usdc", "usdc():(address)", []);

    return result[0].toAddress();
  }

  try_usdc(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdc", "usdc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMarginCall extends ethereum.Call {
  get inputs(): AddMarginCall__Inputs {
    return new AddMarginCall__Inputs(this);
  }

  get outputs(): AddMarginCall__Outputs {
    return new AddMarginCall__Outputs(this);
  }
}

export class AddMarginCall__Inputs {
  _call: AddMarginCall;

  constructor(call: AddMarginCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddMarginCall__Outputs {
  _call: AddMarginCall;

  constructor(call: AddMarginCall) {
    this._call = call;
  }
}

export class AddProductCall extends ethereum.Call {
  get inputs(): AddProductCall__Inputs {
    return new AddProductCall__Inputs(this);
  }

  get outputs(): AddProductCall__Outputs {
    return new AddProductCall__Outputs(this);
  }
}

export class AddProductCall__Inputs {
  _call: AddProductCall;

  constructor(call: AddProductCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _product(): AddProductCall_productStruct {
    return this._call.inputValues[1].value.toTuple() as AddProductCall_productStruct;
  }
}

export class AddProductCall__Outputs {
  _call: AddProductCall;

  constructor(call: AddProductCall) {
    this._call = call;
  }
}

export class AddProductCall_productStruct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get maxExposure(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestLong(): BigInt {
    return this[5].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[6].toBigInt();
  }

  get interest(): i32 {
    return this[7].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[8].toI32();
  }

  get liquidationBounty(): i32 {
    return this[9].toI32();
  }

  get minPriceChange(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this);
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this);
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }
}

export class ClosePositionWithIdCall extends ethereum.Call {
  get inputs(): ClosePositionWithIdCall__Inputs {
    return new ClosePositionWithIdCall__Inputs(this);
  }

  get outputs(): ClosePositionWithIdCall__Outputs {
    return new ClosePositionWithIdCall__Outputs(this);
  }
}

export class ClosePositionWithIdCall__Inputs {
  _call: ClosePositionWithIdCall;

  constructor(call: ClosePositionWithIdCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClosePositionWithIdCall__Outputs {
  _call: ClosePositionWithIdCall;

  constructor(call: ClosePositionWithIdCall) {
    this._call = call;
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get liquidatorReward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get protocolReward(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class LiquidatePositionsCall extends ethereum.Call {
  get inputs(): LiquidatePositionsCall__Inputs {
    return new LiquidatePositionsCall__Inputs(this);
  }

  get outputs(): LiquidatePositionsCall__Outputs {
    return new LiquidatePositionsCall__Outputs(this);
  }
}

export class LiquidatePositionsCall__Inputs {
  _call: LiquidatePositionsCall;

  constructor(call: LiquidatePositionsCall) {
    this._call = call;
  }

  get positionIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class LiquidatePositionsCall__Outputs {
  _call: LiquidatePositionsCall;

  constructor(call: LiquidatePositionsCall) {
    this._call = call;
  }
}

export class OpenPositionCall extends ethereum.Call {
  get inputs(): OpenPositionCall__Inputs {
    return new OpenPositionCall__Inputs(this);
  }

  get outputs(): OpenPositionCall__Outputs {
    return new OpenPositionCall__Outputs(this);
  }
}

export class OpenPositionCall__Inputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get leverage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OpenPositionCall__Outputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get stakeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get shares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class ReleaseMarginCall extends ethereum.Call {
  get inputs(): ReleaseMarginCall__Inputs {
    return new ReleaseMarginCall__Inputs(this);
  }

  get outputs(): ReleaseMarginCall__Outputs {
    return new ReleaseMarginCall__Outputs(this);
  }
}

export class ReleaseMarginCall__Inputs {
  _call: ReleaseMarginCall;

  constructor(call: ReleaseMarginCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReleaseMarginCall__Outputs {
  _call: ReleaseMarginCall;

  constructor(call: ReleaseMarginCall) {
    this._call = call;
  }
}

export class SetAllowPublicLiquidatorCall extends ethereum.Call {
  get inputs(): SetAllowPublicLiquidatorCall__Inputs {
    return new SetAllowPublicLiquidatorCall__Inputs(this);
  }

  get outputs(): SetAllowPublicLiquidatorCall__Outputs {
    return new SetAllowPublicLiquidatorCall__Outputs(this);
  }
}

export class SetAllowPublicLiquidatorCall__Inputs {
  _call: SetAllowPublicLiquidatorCall;

  constructor(call: SetAllowPublicLiquidatorCall) {
    this._call = call;
  }

  get _allowPublicLiquidator(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAllowPublicLiquidatorCall__Outputs {
  _call: SetAllowPublicLiquidatorCall;

  constructor(call: SetAllowPublicLiquidatorCall) {
    this._call = call;
  }
}

export class SetCanUserStakeCall extends ethereum.Call {
  get inputs(): SetCanUserStakeCall__Inputs {
    return new SetCanUserStakeCall__Inputs(this);
  }

  get outputs(): SetCanUserStakeCall__Outputs {
    return new SetCanUserStakeCall__Outputs(this);
  }
}

export class SetCanUserStakeCall__Inputs {
  _call: SetCanUserStakeCall;

  constructor(call: SetCanUserStakeCall) {
    this._call = call;
  }

  get _canUserStake(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetCanUserStakeCall__Outputs {
  _call: SetCanUserStakeCall;

  constructor(call: SetCanUserStakeCall) {
    this._call = call;
  }
}

export class SetLiquidatorCall extends ethereum.Call {
  get inputs(): SetLiquidatorCall__Inputs {
    return new SetLiquidatorCall__Inputs(this);
  }

  get outputs(): SetLiquidatorCall__Outputs {
    return new SetLiquidatorCall__Outputs(this);
  }
}

export class SetLiquidatorCall__Inputs {
  _call: SetLiquidatorCall;

  constructor(call: SetLiquidatorCall) {
    this._call = call;
  }

  get _liquidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidatorCall__Outputs {
  _call: SetLiquidatorCall;

  constructor(call: SetLiquidatorCall) {
    this._call = call;
  }
}

export class SetMaxPositionMarginCall extends ethereum.Call {
  get inputs(): SetMaxPositionMarginCall__Inputs {
    return new SetMaxPositionMarginCall__Inputs(this);
  }

  get outputs(): SetMaxPositionMarginCall__Outputs {
    return new SetMaxPositionMarginCall__Outputs(this);
  }
}

export class SetMaxPositionMarginCall__Inputs {
  _call: SetMaxPositionMarginCall;

  constructor(call: SetMaxPositionMarginCall) {
    this._call = call;
  }

  get _maxPositionMargin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPositionMarginCall__Outputs {
  _call: SetMaxPositionMarginCall;

  constructor(call: SetMaxPositionMarginCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetProtocolAddressCall extends ethereum.Call {
  get inputs(): SetProtocolAddressCall__Inputs {
    return new SetProtocolAddressCall__Inputs(this);
  }

  get outputs(): SetProtocolAddressCall__Outputs {
    return new SetProtocolAddressCall__Outputs(this);
  }
}

export class SetProtocolAddressCall__Inputs {
  _call: SetProtocolAddressCall;

  constructor(call: SetProtocolAddressCall) {
    this._call = call;
  }

  get _protocol(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProtocolAddressCall__Outputs {
  _call: SetProtocolAddressCall;

  constructor(call: SetProtocolAddressCall) {
    this._call = call;
  }
}

export class SetProtocolRewardRatioCall extends ethereum.Call {
  get inputs(): SetProtocolRewardRatioCall__Inputs {
    return new SetProtocolRewardRatioCall__Inputs(this);
  }

  get outputs(): SetProtocolRewardRatioCall__Outputs {
    return new SetProtocolRewardRatioCall__Outputs(this);
  }
}

export class SetProtocolRewardRatioCall__Inputs {
  _call: SetProtocolRewardRatioCall;

  constructor(call: SetProtocolRewardRatioCall) {
    this._call = call;
  }

  get _protocolRewardRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolRewardRatioCall__Outputs {
  _call: SetProtocolRewardRatioCall;

  constructor(call: SetProtocolRewardRatioCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UpdateProductCall extends ethereum.Call {
  get inputs(): UpdateProductCall__Inputs {
    return new UpdateProductCall__Inputs(this);
  }

  get outputs(): UpdateProductCall__Outputs {
    return new UpdateProductCall__Outputs(this);
  }
}

export class UpdateProductCall__Inputs {
  _call: UpdateProductCall;

  constructor(call: UpdateProductCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _product(): UpdateProductCall_productStruct {
    return this._call.inputValues[1].value.toTuple() as UpdateProductCall_productStruct;
  }
}

export class UpdateProductCall__Outputs {
  _call: UpdateProductCall;

  constructor(call: UpdateProductCall) {
    this._call = call;
  }
}

export class UpdateProductCall_productStruct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get maxExposure(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestLong(): BigInt {
    return this[5].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[6].toBigInt();
  }

  get interest(): i32 {
    return this[7].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[8].toI32();
  }

  get liquidationBounty(): i32 {
    return this[9].toI32();
  }

  get minPriceChange(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class UpdateVaultCall extends ethereum.Call {
  get inputs(): UpdateVaultCall__Inputs {
    return new UpdateVaultCall__Inputs(this);
  }

  get outputs(): UpdateVaultCall__Outputs {
    return new UpdateVaultCall__Outputs(this);
  }
}

export class UpdateVaultCall__Inputs {
  _call: UpdateVaultCall;

  constructor(call: UpdateVaultCall) {
    this._call = call;
  }

  get _vault(): UpdateVaultCall_vaultStruct {
    return this._call.inputValues[0].value.toTuple() as UpdateVaultCall_vaultStruct;
  }
}

export class UpdateVaultCall__Outputs {
  _call: UpdateVaultCall;

  constructor(call: UpdateVaultCall) {
    this._call = call;
  }
}

export class UpdateVaultCall_vaultStruct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get lastCheckpointBalance(): BigInt {
    return this[4].toBigInt();
  }

  get lastCheckpointTime(): BigInt {
    return this[5].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[6].toBigInt();
  }

  get redemptionPeriod(): BigInt {
    return this[7].toBigInt();
  }

  get maxDailyDrawdown(): BigInt {
    return this[8].toBigInt();
  }
}
