// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddMargin extends ethereum.Event {
  get params(): AddMargin__Params {
    return new AddMargin__Params(this);
  }
}

export class AddMargin__Params {
  _event: AddMargin;

  constructor(event: AddMargin) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get margin(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newMargin(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newLeverage(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get wasLiquidated(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class NewPosition extends ethereum.Event {
  get params(): NewPosition__Params {
    return new NewPosition__Params(this);
  }
}

export class NewPosition__Params {
  _event: NewPosition;

  constructor(event: NewPosition) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get oraclePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OracleUpdated extends ethereum.Event {
  get params(): OracleUpdated__Params {
    return new OracleUpdated__Params(this);
  }
}

export class OracleUpdated__Params {
  _event: OracleUpdated;

  constructor(event: OracleUpdated) {
    this._event = event;
  }

  get newOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PikaRewardDistributed extends ethereum.Event {
  get params(): PikaRewardDistributed__Params {
    return new PikaRewardDistributed__Params(this);
  }
}

export class PikaRewardDistributed__Params {
  _event: PikaRewardDistributed;

  constructor(event: PikaRewardDistributed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PositionLiquidated extends ethereum.Event {
  get params(): PositionLiquidated__Params {
    return new PositionLiquidated__Params(this);
  }
}

export class PositionLiquidated__Params {
  _event: PositionLiquidated;

  constructor(event: PositionLiquidated) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidatorReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get remainingReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProductAdded extends ethereum.Event {
  get params(): ProductAdded__Params {
    return new ProductAdded__Params(this);
  }
}

export class ProductAdded__Params {
  _event: ProductAdded;

  constructor(event: ProductAdded) {
    this._event = event;
  }

  get productId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get product(): ProductAddedProductStruct {
    return this._event.parameters[1].value.toTuple() as ProductAddedProductStruct;
  }
}

export class ProductAddedProductStruct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get interest(): i32 {
    return this[6].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[7].toI32();
  }

  get liquidationBounty(): i32 {
    return this[8].toI32();
  }

  get minPriceChange(): i32 {
    return this[9].toI32();
  }

  get weight(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class ProductUpdated extends ethereum.Event {
  get params(): ProductUpdated__Params {
    return new ProductUpdated__Params(this);
  }
}

export class ProductUpdated__Params {
  _event: ProductUpdated;

  constructor(event: ProductUpdated) {
    this._event = event;
  }

  get productId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get product(): ProductUpdatedProductStruct {
    return this._event.parameters[1].value.toTuple() as ProductUpdatedProductStruct;
  }
}

export class ProductUpdatedProductStruct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get interest(): i32 {
    return this[6].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[7].toI32();
  }

  get liquidationBounty(): i32 {
    return this[8].toI32();
  }

  get minPriceChange(): i32 {
    return this[9].toI32();
  }

  get weight(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class ProtocolRewardDistributed extends ethereum.Event {
  get params(): ProtocolRewardDistributed__Params {
    return new ProtocolRewardDistributed__Params(this);
  }
}

export class ProtocolRewardDistributed__Params {
  _event: ProtocolRewardDistributed;

  constructor(event: ProtocolRewardDistributed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shareBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isFullRedeem(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class RewardRatioUpdated extends ethereum.Event {
  get params(): RewardRatioUpdated__Params {
    return new RewardRatioUpdated__Params(this);
  }
}

export class RewardRatioUpdated__Params {
  _event: RewardRatioUpdated;

  constructor(event: RewardRatioUpdated) {
    this._event = event;
  }

  get protocolRewardRatio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pikaRewardRatio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VaultRewardDistributed extends ethereum.Event {
  get params(): VaultRewardDistributed__Params {
    return new VaultRewardDistributed__Params(this);
  }
}

export class VaultRewardDistributed__Params {
  _event: VaultRewardDistributed;

  constructor(event: VaultRewardDistributed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultUpdated extends ethereum.Event {
  get params(): VaultUpdated__Params {
    return new VaultUpdated__Params(this);
  }
}

export class VaultUpdated__Params {
  _event: VaultUpdated;

  constructor(event: VaultUpdated) {
    this._event = event;
  }

  get vault(): VaultUpdatedVaultStruct {
    return this._event.parameters[0].value.toTuple() as VaultUpdatedVaultStruct;
  }
}

export class VaultUpdatedVaultStruct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[4].toBigInt();
  }
}

export class PikaPerpV2__getPositionResultPositionStruct extends ethereum.Tuple {
  get productId(): BigInt {
    return this[0].toBigInt();
  }

  get leverage(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get oraclePrice(): BigInt {
    return this[3].toBigInt();
  }

  get margin(): BigInt {
    return this[4].toBigInt();
  }

  get owner(): Address {
    return this[5].toAddress();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }

  get isLong(): boolean {
    return this[7].toBoolean();
  }
}

export class PikaPerpV2__getPositionsResult_positionsStruct extends ethereum.Tuple {
  get productId(): BigInt {
    return this[0].toBigInt();
  }

  get leverage(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get oraclePrice(): BigInt {
    return this[3].toBigInt();
  }

  get margin(): BigInt {
    return this[4].toBigInt();
  }

  get owner(): Address {
    return this[5].toAddress();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }

  get isLong(): boolean {
    return this[7].toBoolean();
  }
}

export class PikaPerpV2__getProductResultValue0Struct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get interest(): i32 {
    return this[6].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[7].toI32();
  }

  get liquidationBounty(): i32 {
    return this[8].toI32();
  }

  get minPriceChange(): i32 {
    return this[9].toI32();
  }

  get weight(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class PikaPerpV2__getStakeResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get shares(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class PikaPerpV2__getVaultResultValue0Struct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[4].toBigInt();
  }
}

export class PikaPerpV2 extends ethereum.SmartContract {
  static bind(address: Address): PikaPerpV2 {
    return new PikaPerpV2("PikaPerpV2", address);
  }

  BASE(): BigInt {
    let result = super.call("BASE", "BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE", "BASE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BASE_DECIMALS(): BigInt {
    let result = super.call("BASE_DECIMALS", "BASE_DECIMALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASE_DECIMALS",
      "BASE_DECIMALS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canLiquidate(positionId: BigInt): boolean {
    let result = super.call("canLiquidate", "canLiquidate(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(positionId)
    ]);

    return result[0].toBoolean();
  }

  try_canLiquidate(positionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canLiquidate", "canLiquidate(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(positionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  distributePikaReward(): BigInt {
    let result = super.call(
      "distributePikaReward",
      "distributePikaReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributePikaReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributePikaReward",
      "distributePikaReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributeProtocolReward(): BigInt {
    let result = super.call(
      "distributeProtocolReward",
      "distributeProtocolReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributeProtocolReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributeProtocolReward",
      "distributeProtocolReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributeVaultReward(): BigInt {
    let result = super.call(
      "distributeVaultReward",
      "distributeVaultReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributeVaultReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributeVaultReward",
      "distributeVaultReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exposureMultiplier(): BigInt {
    let result = super.call(
      "exposureMultiplier",
      "exposureMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exposureMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exposureMultiplier",
      "exposureMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingPikaReward(): BigInt {
    let result = super.call(
      "getPendingPikaReward",
      "getPendingPikaReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingPikaReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingPikaReward",
      "getPendingPikaReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingProtocolReward(): BigInt {
    let result = super.call(
      "getPendingProtocolReward",
      "getPendingProtocolReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingProtocolReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingProtocolReward",
      "getPendingProtocolReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingVaultReward(): BigInt {
    let result = super.call(
      "getPendingVaultReward",
      "getPendingVaultReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingVaultReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingVaultReward",
      "getPendingVaultReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPosition(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): PikaPerpV2__getPositionResultPositionStruct {
    let result = super.call(
      "getPosition",
      "getPosition(address,uint256,bool):((uint64,uint64,uint64,uint64,uint64,address,uint80,bool))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );

    return result[0].toTuple() as PikaPerpV2__getPositionResultPositionStruct;
  }

  try_getPosition(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): ethereum.CallResult<PikaPerpV2__getPositionResultPositionStruct> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(address,uint256,bool):((uint64,uint64,uint64,uint64,uint64,address,uint80,bool))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as PikaPerpV2__getPositionResultPositionStruct
    );
  }

  getPositionId(account: Address, productId: BigInt, isLong: boolean): BigInt {
    let result = super.call(
      "getPositionId",
      "getPositionId(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionId(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionId",
      "getPositionId(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositions(
    positionIds: Array<BigInt>
  ): Array<PikaPerpV2__getPositionsResult_positionsStruct> {
    let result = super.call(
      "getPositions",
      "getPositions(uint256[]):((uint64,uint64,uint64,uint64,uint64,address,uint80,bool)[])",
      [ethereum.Value.fromUnsignedBigIntArray(positionIds)]
    );

    return result[0].toTupleArray<
      PikaPerpV2__getPositionsResult_positionsStruct
    >();
  }

  try_getPositions(
    positionIds: Array<BigInt>
  ): ethereum.CallResult<
    Array<PikaPerpV2__getPositionsResult_positionsStruct>
  > {
    let result = super.tryCall(
      "getPositions",
      "getPositions(uint256[]):((uint64,uint64,uint64,uint64,uint64,address,uint80,bool)[])",
      [ethereum.Value.fromUnsignedBigIntArray(positionIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PikaPerpV2__getPositionsResult_positionsStruct>()
    );
  }

  getProduct(productId: BigInt): PikaPerpV2__getProductResultValue0Struct {
    let result = super.call(
      "getProduct",
      "getProduct(uint256):((address,uint72,uint16,bool,uint64,uint64,uint16,uint16,uint16,uint16,uint16,uint64))",
      [ethereum.Value.fromUnsignedBigInt(productId)]
    );

    return result[0].toTuple() as PikaPerpV2__getProductResultValue0Struct;
  }

  try_getProduct(
    productId: BigInt
  ): ethereum.CallResult<PikaPerpV2__getProductResultValue0Struct> {
    let result = super.tryCall(
      "getProduct",
      "getProduct(uint256):((address,uint72,uint16,bool,uint64,uint64,uint16,uint16,uint16,uint16,uint16,uint64))",
      [ethereum.Value.fromUnsignedBigInt(productId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as PikaPerpV2__getProductResultValue0Struct
    );
  }

  getShare(stakeOwner: Address): BigInt {
    let result = super.call("getShare", "getShare(address):(uint256)", [
      ethereum.Value.fromAddress(stakeOwner)
    ]);

    return result[0].toBigInt();
  }

  try_getShare(stakeOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getShare", "getShare(address):(uint256)", [
      ethereum.Value.fromAddress(stakeOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getShareBalance(stakeOwner: Address): BigInt {
    let result = super.call(
      "getShareBalance",
      "getShareBalance(address):(uint256)",
      [ethereum.Value.fromAddress(stakeOwner)]
    );

    return result[0].toBigInt();
  }

  try_getShareBalance(stakeOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getShareBalance",
      "getShareBalance(address):(uint256)",
      [ethereum.Value.fromAddress(stakeOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStake(stakeOwner: Address): PikaPerpV2__getStakeResultValue0Struct {
    let result = super.call(
      "getStake",
      "getStake(address):((address,uint64,uint64,uint32))",
      [ethereum.Value.fromAddress(stakeOwner)]
    );

    return result[0].toTuple() as PikaPerpV2__getStakeResultValue0Struct;
  }

  try_getStake(
    stakeOwner: Address
  ): ethereum.CallResult<PikaPerpV2__getStakeResultValue0Struct> {
    let result = super.tryCall(
      "getStake",
      "getStake(address):((address,uint64,uint64,uint32))",
      [ethereum.Value.fromAddress(stakeOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as PikaPerpV2__getStakeResultValue0Struct
    );
  }

  getTotalShare(): BigInt {
    let result = super.call("getTotalShare", "getTotalShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalShare",
      "getTotalShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(): PikaPerpV2__getVaultResultValue0Struct {
    let result = super.call(
      "getVault",
      "getVault():((uint96,uint96,uint64,uint64,uint32))",
      []
    );

    return result[0].toTuple() as PikaPerpV2__getVaultResultValue0Struct;
  }

  try_getVault(): ethereum.CallResult<PikaPerpV2__getVaultResultValue0Struct> {
    let result = super.tryCall(
      "getVault",
      "getVault():((uint96,uint96,uint64,uint64,uint32))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as PikaPerpV2__getVaultResultValue0Struct
    );
  }

  liquidator(): Address {
    let result = super.call("liquidator", "liquidator():(address)", []);

    return result[0].toAddress();
  }

  try_liquidator(): ethereum.CallResult<Address> {
    let result = super.tryCall("liquidator", "liquidator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxPositionMargin(): BigInt {
    let result = super.call(
      "maxPositionMargin",
      "maxPositionMargin():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxPositionMargin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxPositionMargin",
      "maxPositionMargin():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxShift(): BigInt {
    let result = super.call("maxShift", "maxShift():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxShift(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxShift", "maxShift():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minMargin(): BigInt {
    let result = super.call("minMargin", "minMargin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minMargin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minMargin", "minMargin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minProfitTime(): BigInt {
    let result = super.call("minProfitTime", "minProfitTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minProfitTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minProfitTime",
      "minProfitTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingPikaReward(): BigInt {
    let result = super.call(
      "pendingPikaReward",
      "pendingPikaReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pendingPikaReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingPikaReward",
      "pendingPikaReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingProtocolReward(): BigInt {
    let result = super.call(
      "pendingProtocolReward",
      "pendingProtocolReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pendingProtocolReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingProtocolReward",
      "pendingProtocolReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingVaultReward(): BigInt {
    let result = super.call(
      "pendingVaultReward",
      "pendingVaultReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pendingVaultReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingVaultReward",
      "pendingVaultReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pikaRewardDistributor(): Address {
    let result = super.call(
      "pikaRewardDistributor",
      "pikaRewardDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_pikaRewardDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pikaRewardDistributor",
      "pikaRewardDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pikaRewardRatio(): BigInt {
    let result = super.call(
      "pikaRewardRatio",
      "pikaRewardRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pikaRewardRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pikaRewardRatio",
      "pikaRewardRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolRewardDistributor(): Address {
    let result = super.call(
      "protocolRewardDistributor",
      "protocolRewardDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolRewardDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolRewardDistributor",
      "protocolRewardDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolRewardRatio(): BigInt {
    let result = super.call(
      "protocolRewardRatio",
      "protocolRewardRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolRewardRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolRewardRatio",
      "protocolRewardRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBase(): BigInt {
    let result = super.call("tokenBase", "tokenBase():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenBase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenBase", "tokenBase():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenDecimal(): BigInt {
    let result = super.call("tokenDecimal", "tokenDecimal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenDecimal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenDecimal", "tokenDecimal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalOpenInterest(): BigInt {
    let result = super.call(
      "totalOpenInterest",
      "totalOpenInterest():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalOpenInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalOpenInterest",
      "totalOpenInterest():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeight(): BigInt {
    let result = super.call("totalWeight", "totalWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWeight", "totalWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  utilizationMultiplier(): BigInt {
    let result = super.call(
      "utilizationMultiplier",
      "utilizationMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_utilizationMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "utilizationMultiplier",
      "utilizationMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultRewardDistributor(): Address {
    let result = super.call(
      "vaultRewardDistributor",
      "vaultRewardDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vaultRewardDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultRewardDistributor",
      "vaultRewardDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultTokenReward(): Address {
    let result = super.call(
      "vaultTokenReward",
      "vaultTokenReward():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vaultTokenReward(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultTokenReward",
      "vaultTokenReward():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenDecimal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _oracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minMargin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMarginCall extends ethereum.Call {
  get inputs(): AddMarginCall__Inputs {
    return new AddMarginCall__Inputs(this);
  }

  get outputs(): AddMarginCall__Outputs {
    return new AddMarginCall__Outputs(this);
  }
}

export class AddMarginCall__Inputs {
  _call: AddMarginCall;

  constructor(call: AddMarginCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddMarginCall__Outputs {
  _call: AddMarginCall;

  constructor(call: AddMarginCall) {
    this._call = call;
  }
}

export class AddProductCall extends ethereum.Call {
  get inputs(): AddProductCall__Inputs {
    return new AddProductCall__Inputs(this);
  }

  get outputs(): AddProductCall__Outputs {
    return new AddProductCall__Outputs(this);
  }
}

export class AddProductCall__Inputs {
  _call: AddProductCall;

  constructor(call: AddProductCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _product(): AddProductCall_productStruct {
    return this._call.inputValues[1].value.toTuple() as AddProductCall_productStruct;
  }
}

export class AddProductCall__Outputs {
  _call: AddProductCall;

  constructor(call: AddProductCall) {
    this._call = call;
  }
}

export class AddProductCall_productStruct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get interest(): i32 {
    return this[6].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[7].toI32();
  }

  get liquidationBounty(): i32 {
    return this[8].toI32();
  }

  get minPriceChange(): i32 {
    return this[9].toI32();
  }

  get weight(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this);
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this);
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }
}

export class ClosePositionWithIdCall extends ethereum.Call {
  get inputs(): ClosePositionWithIdCall__Inputs {
    return new ClosePositionWithIdCall__Inputs(this);
  }

  get outputs(): ClosePositionWithIdCall__Outputs {
    return new ClosePositionWithIdCall__Outputs(this);
  }
}

export class ClosePositionWithIdCall__Inputs {
  _call: ClosePositionWithIdCall;

  constructor(call: ClosePositionWithIdCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClosePositionWithIdCall__Outputs {
  _call: ClosePositionWithIdCall;

  constructor(call: ClosePositionWithIdCall) {
    this._call = call;
  }
}

export class DistributePikaRewardCall extends ethereum.Call {
  get inputs(): DistributePikaRewardCall__Inputs {
    return new DistributePikaRewardCall__Inputs(this);
  }

  get outputs(): DistributePikaRewardCall__Outputs {
    return new DistributePikaRewardCall__Outputs(this);
  }
}

export class DistributePikaRewardCall__Inputs {
  _call: DistributePikaRewardCall;

  constructor(call: DistributePikaRewardCall) {
    this._call = call;
  }
}

export class DistributePikaRewardCall__Outputs {
  _call: DistributePikaRewardCall;

  constructor(call: DistributePikaRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DistributeProtocolRewardCall extends ethereum.Call {
  get inputs(): DistributeProtocolRewardCall__Inputs {
    return new DistributeProtocolRewardCall__Inputs(this);
  }

  get outputs(): DistributeProtocolRewardCall__Outputs {
    return new DistributeProtocolRewardCall__Outputs(this);
  }
}

export class DistributeProtocolRewardCall__Inputs {
  _call: DistributeProtocolRewardCall;

  constructor(call: DistributeProtocolRewardCall) {
    this._call = call;
  }
}

export class DistributeProtocolRewardCall__Outputs {
  _call: DistributeProtocolRewardCall;

  constructor(call: DistributeProtocolRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DistributeVaultRewardCall extends ethereum.Call {
  get inputs(): DistributeVaultRewardCall__Inputs {
    return new DistributeVaultRewardCall__Inputs(this);
  }

  get outputs(): DistributeVaultRewardCall__Outputs {
    return new DistributeVaultRewardCall__Outputs(this);
  }
}

export class DistributeVaultRewardCall__Inputs {
  _call: DistributeVaultRewardCall;

  constructor(call: DistributeVaultRewardCall) {
    this._call = call;
  }
}

export class DistributeVaultRewardCall__Outputs {
  _call: DistributeVaultRewardCall;

  constructor(call: DistributeVaultRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidatePositionsCall extends ethereum.Call {
  get inputs(): LiquidatePositionsCall__Inputs {
    return new LiquidatePositionsCall__Inputs(this);
  }

  get outputs(): LiquidatePositionsCall__Outputs {
    return new LiquidatePositionsCall__Outputs(this);
  }
}

export class LiquidatePositionsCall__Inputs {
  _call: LiquidatePositionsCall;

  constructor(call: LiquidatePositionsCall) {
    this._call = call;
  }

  get positionIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class LiquidatePositionsCall__Outputs {
  _call: LiquidatePositionsCall;

  constructor(call: LiquidatePositionsCall) {
    this._call = call;
  }
}

export class OpenPositionCall extends ethereum.Call {
  get inputs(): OpenPositionCall__Inputs {
    return new OpenPositionCall__Inputs(this);
  }

  get outputs(): OpenPositionCall__Outputs {
    return new OpenPositionCall__Outputs(this);
  }
}

export class OpenPositionCall__Inputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get leverage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OpenPositionCall__Outputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OpenPositionForUserCall extends ethereum.Call {
  get inputs(): OpenPositionForUserCall__Inputs {
    return new OpenPositionForUserCall__Inputs(this);
  }

  get outputs(): OpenPositionForUserCall__Outputs {
    return new OpenPositionForUserCall__Outputs(this);
  }
}

export class OpenPositionForUserCall__Inputs {
  _call: OpenPositionForUserCall;

  constructor(call: OpenPositionForUserCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get productId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get leverage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class OpenPositionForUserCall__Outputs {
  _call: OpenPositionForUserCall;

  constructor(call: OpenPositionForUserCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class ReleaseMarginCall extends ethereum.Call {
  get inputs(): ReleaseMarginCall__Inputs {
    return new ReleaseMarginCall__Inputs(this);
  }

  get outputs(): ReleaseMarginCall__Outputs {
    return new ReleaseMarginCall__Outputs(this);
  }
}

export class ReleaseMarginCall__Inputs {
  _call: ReleaseMarginCall;

  constructor(call: ReleaseMarginCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReleaseMarginCall__Outputs {
  _call: ReleaseMarginCall;

  constructor(call: ReleaseMarginCall) {
    this._call = call;
  }
}

export class SetCanUserStakeAndAllowPublicLiquidatorCall extends ethereum.Call {
  get inputs(): SetCanUserStakeAndAllowPublicLiquidatorCall__Inputs {
    return new SetCanUserStakeAndAllowPublicLiquidatorCall__Inputs(this);
  }

  get outputs(): SetCanUserStakeAndAllowPublicLiquidatorCall__Outputs {
    return new SetCanUserStakeAndAllowPublicLiquidatorCall__Outputs(this);
  }
}

export class SetCanUserStakeAndAllowPublicLiquidatorCall__Inputs {
  _call: SetCanUserStakeAndAllowPublicLiquidatorCall;

  constructor(call: SetCanUserStakeAndAllowPublicLiquidatorCall) {
    this._call = call;
  }

  get _canUserStake(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _allowPublicLiquidator(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetCanUserStakeAndAllowPublicLiquidatorCall__Outputs {
  _call: SetCanUserStakeAndAllowPublicLiquidatorCall;

  constructor(call: SetCanUserStakeAndAllowPublicLiquidatorCall) {
    this._call = call;
  }
}

export class SetDistributorsCall extends ethereum.Call {
  get inputs(): SetDistributorsCall__Inputs {
    return new SetDistributorsCall__Inputs(this);
  }

  get outputs(): SetDistributorsCall__Outputs {
    return new SetDistributorsCall__Outputs(this);
  }
}

export class SetDistributorsCall__Inputs {
  _call: SetDistributorsCall;

  constructor(call: SetDistributorsCall) {
    this._call = call;
  }

  get _protocolRewardDistributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pikaRewardDistributor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vaultRewardDistributor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _vaultTokenReward(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetDistributorsCall__Outputs {
  _call: SetDistributorsCall;

  constructor(call: SetDistributorsCall) {
    this._call = call;
  }
}

export class SetExposureMultiplierCall extends ethereum.Call {
  get inputs(): SetExposureMultiplierCall__Inputs {
    return new SetExposureMultiplierCall__Inputs(this);
  }

  get outputs(): SetExposureMultiplierCall__Outputs {
    return new SetExposureMultiplierCall__Outputs(this);
  }
}

export class SetExposureMultiplierCall__Inputs {
  _call: SetExposureMultiplierCall;

  constructor(call: SetExposureMultiplierCall) {
    this._call = call;
  }

  get _exposureMultiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetExposureMultiplierCall__Outputs {
  _call: SetExposureMultiplierCall;

  constructor(call: SetExposureMultiplierCall) {
    this._call = call;
  }
}

export class SetLiquidatorCall extends ethereum.Call {
  get inputs(): SetLiquidatorCall__Inputs {
    return new SetLiquidatorCall__Inputs(this);
  }

  get outputs(): SetLiquidatorCall__Outputs {
    return new SetLiquidatorCall__Outputs(this);
  }
}

export class SetLiquidatorCall__Inputs {
  _call: SetLiquidatorCall;

  constructor(call: SetLiquidatorCall) {
    this._call = call;
  }

  get _liquidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidatorCall__Outputs {
  _call: SetLiquidatorCall;

  constructor(call: SetLiquidatorCall) {
    this._call = call;
  }
}

export class SetMarginCall extends ethereum.Call {
  get inputs(): SetMarginCall__Inputs {
    return new SetMarginCall__Inputs(this);
  }

  get outputs(): SetMarginCall__Outputs {
    return new SetMarginCall__Outputs(this);
  }
}

export class SetMarginCall__Inputs {
  _call: SetMarginCall;

  constructor(call: SetMarginCall) {
    this._call = call;
  }

  get _minMargin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxPositionMargin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMarginCall__Outputs {
  _call: SetMarginCall;

  constructor(call: SetMarginCall) {
    this._call = call;
  }
}

export class SetMaxShiftAndMinProfitTimeCall extends ethereum.Call {
  get inputs(): SetMaxShiftAndMinProfitTimeCall__Inputs {
    return new SetMaxShiftAndMinProfitTimeCall__Inputs(this);
  }

  get outputs(): SetMaxShiftAndMinProfitTimeCall__Outputs {
    return new SetMaxShiftAndMinProfitTimeCall__Outputs(this);
  }
}

export class SetMaxShiftAndMinProfitTimeCall__Inputs {
  _call: SetMaxShiftAndMinProfitTimeCall;

  constructor(call: SetMaxShiftAndMinProfitTimeCall) {
    this._call = call;
  }

  get _maxShift(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minProfitTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMaxShiftAndMinProfitTimeCall__Outputs {
  _call: SetMaxShiftAndMinProfitTimeCall;

  constructor(call: SetMaxShiftAndMinProfitTimeCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetRewardRatioCall extends ethereum.Call {
  get inputs(): SetRewardRatioCall__Inputs {
    return new SetRewardRatioCall__Inputs(this);
  }

  get outputs(): SetRewardRatioCall__Outputs {
    return new SetRewardRatioCall__Outputs(this);
  }
}

export class SetRewardRatioCall__Inputs {
  _call: SetRewardRatioCall;

  constructor(call: SetRewardRatioCall) {
    this._call = call;
  }

  get _protocolRewardRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pikaRewardRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardRatioCall__Outputs {
  _call: SetRewardRatioCall;

  constructor(call: SetRewardRatioCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeForUserCall extends ethereum.Call {
  get inputs(): StakeForUserCall__Inputs {
    return new StakeForUserCall__Inputs(this);
  }

  get outputs(): StakeForUserCall__Outputs {
    return new StakeForUserCall__Outputs(this);
  }
}

export class StakeForUserCall__Inputs {
  _call: StakeForUserCall;

  constructor(call: StakeForUserCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class StakeForUserCall__Outputs {
  _call: StakeForUserCall;

  constructor(call: StakeForUserCall) {
    this._call = call;
  }
}

export class UpdateProductCall extends ethereum.Call {
  get inputs(): UpdateProductCall__Inputs {
    return new UpdateProductCall__Inputs(this);
  }

  get outputs(): UpdateProductCall__Outputs {
    return new UpdateProductCall__Outputs(this);
  }
}

export class UpdateProductCall__Inputs {
  _call: UpdateProductCall;

  constructor(call: UpdateProductCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _product(): UpdateProductCall_productStruct {
    return this._call.inputValues[1].value.toTuple() as UpdateProductCall_productStruct;
  }
}

export class UpdateProductCall__Outputs {
  _call: UpdateProductCall;

  constructor(call: UpdateProductCall) {
    this._call = call;
  }
}

export class UpdateProductCall_productStruct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get interest(): i32 {
    return this[6].toI32();
  }

  get liquidationThreshold(): i32 {
    return this[7].toI32();
  }

  get liquidationBounty(): i32 {
    return this[8].toI32();
  }

  get minPriceChange(): i32 {
    return this[9].toI32();
  }

  get weight(): i32 {
    return this[10].toI32();
  }

  get reserve(): BigInt {
    return this[11].toBigInt();
  }
}

export class UpdateVaultCall extends ethereum.Call {
  get inputs(): UpdateVaultCall__Inputs {
    return new UpdateVaultCall__Inputs(this);
  }

  get outputs(): UpdateVaultCall__Outputs {
    return new UpdateVaultCall__Outputs(this);
  }
}

export class UpdateVaultCall__Inputs {
  _call: UpdateVaultCall;

  constructor(call: UpdateVaultCall) {
    this._call = call;
  }

  get _vault(): UpdateVaultCall_vaultStruct {
    return this._call.inputValues[0].value.toTuple() as UpdateVaultCall_vaultStruct;
  }
}

export class UpdateVaultCall__Outputs {
  _call: UpdateVaultCall;

  constructor(call: UpdateVaultCall) {
    this._call = call;
  }
}

export class UpdateVaultCall_vaultStruct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[4].toBigInt();
  }
}
