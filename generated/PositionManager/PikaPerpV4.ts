// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressesSet extends ethereum.Event {
  get params(): AddressesSet__Params {
    return new AddressesSet__Params(this);
  }
}

export class AddressesSet__Params {
  _event: AddressesSet;

  constructor(event: AddressesSet) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeCalculator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fundingManager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get fundingPayment(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get wasLiquidated(): boolean {
    return this._event.parameters[10].value.toBoolean();
  }
}

export class GovUpdated extends ethereum.Event {
  get params(): GovUpdated__Params {
    return new GovUpdated__Params(this);
  }
}

export class GovUpdated__Params {
  _event: GovUpdated;

  constructor(event: GovUpdated) {
    this._event = event;
  }

  get newGov(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GuardianUpdated extends ethereum.Event {
  get params(): GuardianUpdated__Params {
    return new GuardianUpdated__Params(this);
  }
}

export class GuardianUpdated__Params {
  _event: GuardianUpdated;

  constructor(event: GuardianUpdated) {
    this._event = event;
  }

  get newGuardian(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ModifyMargin extends ethereum.Event {
  get params(): ModifyMargin__Params {
    return new ModifyMargin__Params(this);
  }
}

export class ModifyMargin__Params {
  _event: ModifyMargin;

  constructor(event: ModifyMargin) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get margin(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newMargin(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newLeverage(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get shouldIncrease(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class NewPosition extends ethereum.Event {
  get params(): NewPosition__Params {
    return new NewPosition__Params(this);
  }
}

export class NewPosition__Params {
  _event: NewPosition;

  constructor(event: NewPosition) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get productId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get oraclePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get isNextPrice(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }

  get funding(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PikaRewardDistributed extends ethereum.Event {
  get params(): PikaRewardDistributed__Params {
    return new PikaRewardDistributed__Params(this);
  }
}

export class PikaRewardDistributed__Params {
  _event: PikaRewardDistributed;

  constructor(event: PikaRewardDistributed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PositionLiquidated extends ethereum.Event {
  get params(): PositionLiquidated__Params {
    return new PositionLiquidated__Params(this);
  }
}

export class PositionLiquidated__Params {
  _event: PositionLiquidated;

  constructor(event: PositionLiquidated) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidatorReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get remainingReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProductAdded extends ethereum.Event {
  get params(): ProductAdded__Params {
    return new ProductAdded__Params(this);
  }
}

export class ProductAdded__Params {
  _event: ProductAdded;

  constructor(event: ProductAdded) {
    this._event = event;
  }

  get productId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get product(): ProductAddedProductStruct {
    return changetype<ProductAddedProductStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ProductAddedProductStruct extends ethereum.Tuple {
  get productToken(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get minPriceChange(): BigInt {
    return this[6].toBigInt();
  }

  get weight(): BigInt {
    return this[7].toBigInt();
  }

  get reserve(): BigInt {
    return this[8].toBigInt();
  }
}

export class ProductUpdated extends ethereum.Event {
  get params(): ProductUpdated__Params {
    return new ProductUpdated__Params(this);
  }
}

export class ProductUpdated__Params {
  _event: ProductUpdated;

  constructor(event: ProductUpdated) {
    this._event = event;
  }

  get productId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get product(): ProductUpdatedProductStruct {
    return changetype<ProductUpdatedProductStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ProductUpdatedProductStruct extends ethereum.Tuple {
  get productToken(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get minPriceChange(): BigInt {
    return this[6].toBigInt();
  }

  get weight(): BigInt {
    return this[7].toBigInt();
  }

  get reserve(): BigInt {
    return this[8].toBigInt();
  }
}

export class ProtocolRewardDistributed extends ethereum.Event {
  get params(): ProtocolRewardDistributed__Params {
    return new ProtocolRewardDistributed__Params(this);
  }
}

export class ProtocolRewardDistributed__Params {
  _event: ProtocolRewardDistributed;

  constructor(event: ProtocolRewardDistributed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shareBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get isFullRedeem(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VaultRewardDistributed extends ethereum.Event {
  get params(): VaultRewardDistributed__Params {
    return new VaultRewardDistributed__Params(this);
  }
}

export class VaultRewardDistributed__Params {
  _event: VaultRewardDistributed;

  constructor(event: VaultRewardDistributed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultUpdated extends ethereum.Event {
  get params(): VaultUpdated__Params {
    return new VaultUpdated__Params(this);
  }
}

export class VaultUpdated__Params {
  _event: VaultUpdated;

  constructor(event: VaultUpdated) {
    this._event = event;
  }

  get vault(): VaultUpdatedVaultStruct {
    return changetype<VaultUpdatedVaultStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class VaultUpdatedVaultStruct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[4].toBigInt();
  }
}

export class PikaPerpV4__getPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: boolean;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: boolean,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromSignedBigInt(this.value8));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }

  getValue5(): Address {
    return this.value5;
  }

  getValue6(): BigInt {
    return this.value6;
  }

  getValue7(): boolean {
    return this.value7;
  }

  getValue8(): BigInt {
    return this.value8;
  }
}

export class PikaPerpV4__getPositionsResult_positionsStruct extends ethereum.Tuple {
  get productId(): BigInt {
    return this[0].toBigInt();
  }

  get leverage(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get oraclePrice(): BigInt {
    return this[3].toBigInt();
  }

  get margin(): BigInt {
    return this[4].toBigInt();
  }

  get funding(): BigInt {
    return this[5].toBigInt();
  }

  get owner(): Address {
    return this[6].toAddress();
  }

  get isLong(): boolean {
    return this[7].toBoolean();
  }

  get isNextPrice(): boolean {
    return this[8].toBoolean();
  }

  get timestamp(): BigInt {
    return this[9].toBigInt();
  }
}

export class PikaPerpV4__getProductResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): boolean {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }

  getValue5(): BigInt {
    return this.value5;
  }

  getValue6(): BigInt {
    return this.value6;
  }

  getValue7(): BigInt {
    return this.value7;
  }

  getValue8(): BigInt {
    return this.value8;
  }
}

export class PikaPerpV4__getStakeResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get shares(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class PikaPerpV4__getVaultResultValue0Struct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[4].toBigInt();
  }
}

export class PikaPerpV4 extends ethereum.SmartContract {
  static bind(address: Address): PikaPerpV4 {
    return new PikaPerpV4("PikaPerpV4", address);
  }

  approvedManagers(param0: Address, param1: Address): boolean {
    let result = super.call(
      "approvedManagers",
      "approvedManagers(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_approvedManagers(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedManagers",
      "approvedManagers(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  distributePikaReward(): BigInt {
    let result = super.call(
      "distributePikaReward",
      "distributePikaReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributePikaReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributePikaReward",
      "distributePikaReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributeProtocolReward(): BigInt {
    let result = super.call(
      "distributeProtocolReward",
      "distributeProtocolReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributeProtocolReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributeProtocolReward",
      "distributeProtocolReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributeVaultReward(): BigInt {
    let result = super.call(
      "distributeVaultReward",
      "distributeVaultReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributeVaultReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributeVaultReward",
      "distributeVaultReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exposureMultiplier(): BigInt {
    let result = super.call(
      "exposureMultiplier",
      "exposureMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exposureMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exposureMultiplier",
      "exposureMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeCalculator(): Address {
    let result = super.call("feeCalculator", "feeCalculator():(address)", []);

    return result[0].toAddress();
  }

  try_feeCalculator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feeCalculator",
      "feeCalculator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundingManager(): Address {
    let result = super.call("fundingManager", "fundingManager():(address)", []);

    return result[0].toAddress();
  }

  try_fundingManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundingManager",
      "fundingManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxExposure(productWeight: BigInt): BigInt {
    let result = super.call(
      "getMaxExposure",
      "getMaxExposure(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(productWeight)]
    );

    return result[0].toBigInt();
  }

  try_getMaxExposure(productWeight: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxExposure",
      "getMaxExposure(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(productWeight)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingPikaReward(): BigInt {
    let result = super.call(
      "getPendingPikaReward",
      "getPendingPikaReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingPikaReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingPikaReward",
      "getPendingPikaReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingProtocolReward(): BigInt {
    let result = super.call(
      "getPendingProtocolReward",
      "getPendingProtocolReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingProtocolReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingProtocolReward",
      "getPendingProtocolReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingVaultReward(): BigInt {
    let result = super.call(
      "getPendingVaultReward",
      "getPendingVaultReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingVaultReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingVaultReward",
      "getPendingVaultReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPosition(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): PikaPerpV4__getPositionResult {
    let result = super.call(
      "getPosition",
      "getPosition(address,uint256,bool):(uint256,uint256,uint256,uint256,uint256,address,uint256,bool,int256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );

    return new PikaPerpV4__getPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBigInt()
    );
  }

  try_getPosition(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): ethereum.CallResult<PikaPerpV4__getPositionResult> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(address,uint256,bool):(uint256,uint256,uint256,uint256,uint256,address,uint256,bool,int256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PikaPerpV4__getPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBigInt()
      )
    );
  }

  getPositionId(account: Address, productId: BigInt, isLong: boolean): BigInt {
    let result = super.call(
      "getPositionId",
      "getPositionId(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionId(
    account: Address,
    productId: BigInt,
    isLong: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionId",
      "getPositionId(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(productId),
        ethereum.Value.fromBoolean(isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositions(
    positionIds: Array<BigInt>
  ): Array<PikaPerpV4__getPositionsResult_positionsStruct> {
    let result = super.call(
      "getPositions",
      "getPositions(uint256[]):((uint64,uint64,uint64,uint64,uint128,int128,address,bool,bool,uint80)[])",
      [ethereum.Value.fromUnsignedBigIntArray(positionIds)]
    );

    return result[0].toTupleArray<
      PikaPerpV4__getPositionsResult_positionsStruct
    >();
  }

  try_getPositions(
    positionIds: Array<BigInt>
  ): ethereum.CallResult<
    Array<PikaPerpV4__getPositionsResult_positionsStruct>
  > {
    let result = super.tryCall(
      "getPositions",
      "getPositions(uint256[]):((uint64,uint64,uint64,uint64,uint128,int128,address,bool,bool,uint80)[])",
      [ethereum.Value.fromUnsignedBigIntArray(positionIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PikaPerpV4__getPositionsResult_positionsStruct>()
    );
  }

  getProduct(productId: BigInt): PikaPerpV4__getProductResult {
    let result = super.call(
      "getProduct",
      "getProduct(uint256):(address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(productId)]
    );

    return new PikaPerpV4__getProductResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_getProduct(
    productId: BigInt
  ): ethereum.CallResult<PikaPerpV4__getProductResult> {
    let result = super.tryCall(
      "getProduct",
      "getProduct(uint256):(address,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(productId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PikaPerpV4__getProductResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  getShare(stakeOwner: Address): BigInt {
    let result = super.call("getShare", "getShare(address):(uint256)", [
      ethereum.Value.fromAddress(stakeOwner)
    ]);

    return result[0].toBigInt();
  }

  try_getShare(stakeOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getShare", "getShare(address):(uint256)", [
      ethereum.Value.fromAddress(stakeOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStake(stakeOwner: Address): PikaPerpV4__getStakeResultValue0Struct {
    let result = super.call(
      "getStake",
      "getStake(address):((address,uint96,uint128,uint128))",
      [ethereum.Value.fromAddress(stakeOwner)]
    );

    return changetype<PikaPerpV4__getStakeResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getStake(
    stakeOwner: Address
  ): ethereum.CallResult<PikaPerpV4__getStakeResultValue0Struct> {
    let result = super.tryCall(
      "getStake",
      "getStake(address):((address,uint96,uint128,uint128))",
      [ethereum.Value.fromAddress(stakeOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PikaPerpV4__getStakeResultValue0Struct>(value[0].toTuple())
    );
  }

  getTotalShare(): BigInt {
    let result = super.call("getTotalShare", "getTotalShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalShare",
      "getTotalShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(): PikaPerpV4__getVaultResultValue0Struct {
    let result = super.call(
      "getVault",
      "getVault():((uint128,uint128,uint96,uint96,uint64))",
      []
    );

    return changetype<PikaPerpV4__getVaultResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getVault(): ethereum.CallResult<PikaPerpV4__getVaultResultValue0Struct> {
    let result = super.tryCall(
      "getVault",
      "getVault():((uint128,uint128,uint96,uint96,uint64))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PikaPerpV4__getVaultResultValue0Struct>(value[0].toTuple())
    );
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guardian(): Address {
    let result = super.call("guardian", "guardian():(address)", []);

    return result[0].toAddress();
  }

  try_guardian(): ethereum.CallResult<Address> {
    let result = super.tryCall("guardian", "guardian():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationThreshold(): BigInt {
    let result = super.call(
      "liquidationThreshold",
      "liquidationThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationThreshold",
      "liquidationThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidators(param0: Address): boolean {
    let result = super.call("liquidators", "liquidators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_liquidators(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("liquidators", "liquidators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  managers(param0: Address): boolean {
    let result = super.call("managers", "managers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_managers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("managers", "managers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxExposureMultiplier(): BigInt {
    let result = super.call(
      "maxExposureMultiplier",
      "maxExposureMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxExposureMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxExposureMultiplier",
      "maxExposureMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxShift(): BigInt {
    let result = super.call("maxShift", "maxShift():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxShift(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxShift", "maxShift():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minMargin(): BigInt {
    let result = super.call("minMargin", "minMargin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minMargin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minMargin", "minMargin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minProfitTime(): BigInt {
    let result = super.call("minProfitTime", "minProfitTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minProfitTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minProfitTime",
      "minProfitTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextPriceManagers(param0: Address): boolean {
    let result = super.call(
      "nextPriceManagers",
      "nextPriceManagers(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_nextPriceManagers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nextPriceManagers",
      "nextPriceManagers(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pikaRewardDistributor(): Address {
    let result = super.call(
      "pikaRewardDistributor",
      "pikaRewardDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_pikaRewardDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pikaRewardDistributor",
      "pikaRewardDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pikaRewardRatio(): BigInt {
    let result = super.call(
      "pikaRewardRatio",
      "pikaRewardRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pikaRewardRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pikaRewardRatio",
      "pikaRewardRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolRewardDistributor(): Address {
    let result = super.call(
      "protocolRewardDistributor",
      "protocolRewardDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolRewardDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolRewardDistributor",
      "protocolRewardDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolRewardRatio(): BigInt {
    let result = super.call(
      "protocolRewardRatio",
      "protocolRewardRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolRewardRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolRewardRatio",
      "protocolRewardRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shiftDivider(): BigInt {
    let result = super.call("shiftDivider", "shiftDivider():(uint256)", []);

    return result[0].toBigInt();
  }

  try_shiftDivider(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shiftDivider", "shiftDivider():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalOpenInterest(): BigInt {
    let result = super.call(
      "totalOpenInterest",
      "totalOpenInterest():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalOpenInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalOpenInterest",
      "totalOpenInterest():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeight(): BigInt {
    let result = super.call("totalWeight", "totalWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWeight", "totalWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  utilizationMultiplier(): BigInt {
    let result = super.call(
      "utilizationMultiplier",
      "utilizationMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_utilizationMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "utilizationMultiplier",
      "utilizationMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultRewardDistributor(): Address {
    let result = super.call(
      "vaultRewardDistributor",
      "vaultRewardDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vaultRewardDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultRewardDistributor",
      "vaultRewardDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultTokenReward(): Address {
    let result = super.call(
      "vaultTokenReward",
      "vaultTokenReward():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vaultTokenReward(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultTokenReward",
      "vaultTokenReward():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenBase(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _oracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _feeCalculator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _fundingManager(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddProductCall extends ethereum.Call {
  get inputs(): AddProductCall__Inputs {
    return new AddProductCall__Inputs(this);
  }

  get outputs(): AddProductCall__Outputs {
    return new AddProductCall__Outputs(this);
  }
}

export class AddProductCall__Inputs {
  _call: AddProductCall;

  constructor(call: AddProductCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _product(): AddProductCall_productStruct {
    return changetype<AddProductCall_productStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class AddProductCall__Outputs {
  _call: AddProductCall;

  constructor(call: AddProductCall) {
    this._call = call;
  }
}

export class AddProductCall_productStruct extends ethereum.Tuple {
  get productToken(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get minPriceChange(): BigInt {
    return this[6].toBigInt();
  }

  get weight(): BigInt {
    return this[7].toBigInt();
  }

  get reserve(): BigInt {
    return this[8].toBigInt();
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this);
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this);
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get productId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get oraclePrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }
}

export class ClosePositionWithIdCall extends ethereum.Call {
  get inputs(): ClosePositionWithIdCall__Inputs {
    return new ClosePositionWithIdCall__Inputs(this);
  }

  get outputs(): ClosePositionWithIdCall__Outputs {
    return new ClosePositionWithIdCall__Outputs(this);
  }
}

export class ClosePositionWithIdCall__Inputs {
  _call: ClosePositionWithIdCall;

  constructor(call: ClosePositionWithIdCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get oraclePrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClosePositionWithIdCall__Outputs {
  _call: ClosePositionWithIdCall;

  constructor(call: ClosePositionWithIdCall) {
    this._call = call;
  }
}

export class DistributePikaRewardCall extends ethereum.Call {
  get inputs(): DistributePikaRewardCall__Inputs {
    return new DistributePikaRewardCall__Inputs(this);
  }

  get outputs(): DistributePikaRewardCall__Outputs {
    return new DistributePikaRewardCall__Outputs(this);
  }
}

export class DistributePikaRewardCall__Inputs {
  _call: DistributePikaRewardCall;

  constructor(call: DistributePikaRewardCall) {
    this._call = call;
  }
}

export class DistributePikaRewardCall__Outputs {
  _call: DistributePikaRewardCall;

  constructor(call: DistributePikaRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DistributeProtocolRewardCall extends ethereum.Call {
  get inputs(): DistributeProtocolRewardCall__Inputs {
    return new DistributeProtocolRewardCall__Inputs(this);
  }

  get outputs(): DistributeProtocolRewardCall__Outputs {
    return new DistributeProtocolRewardCall__Outputs(this);
  }
}

export class DistributeProtocolRewardCall__Inputs {
  _call: DistributeProtocolRewardCall;

  constructor(call: DistributeProtocolRewardCall) {
    this._call = call;
  }
}

export class DistributeProtocolRewardCall__Outputs {
  _call: DistributeProtocolRewardCall;

  constructor(call: DistributeProtocolRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DistributeVaultRewardCall extends ethereum.Call {
  get inputs(): DistributeVaultRewardCall__Inputs {
    return new DistributeVaultRewardCall__Inputs(this);
  }

  get outputs(): DistributeVaultRewardCall__Outputs {
    return new DistributeVaultRewardCall__Outputs(this);
  }
}

export class DistributeVaultRewardCall__Inputs {
  _call: DistributeVaultRewardCall;

  constructor(call: DistributeVaultRewardCall) {
    this._call = call;
  }
}

export class DistributeVaultRewardCall__Outputs {
  _call: DistributeVaultRewardCall;

  constructor(call: DistributeVaultRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidatePositionsCall extends ethereum.Call {
  get inputs(): LiquidatePositionsCall__Inputs {
    return new LiquidatePositionsCall__Inputs(this);
  }

  get outputs(): LiquidatePositionsCall__Outputs {
    return new LiquidatePositionsCall__Outputs(this);
  }
}

export class LiquidatePositionsCall__Inputs {
  _call: LiquidatePositionsCall;

  constructor(call: LiquidatePositionsCall) {
    this._call = call;
  }

  get positionIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class LiquidatePositionsCall__Outputs {
  _call: LiquidatePositionsCall;

  constructor(call: LiquidatePositionsCall) {
    this._call = call;
  }
}

export class ModifyMarginCall extends ethereum.Call {
  get inputs(): ModifyMarginCall__Inputs {
    return new ModifyMarginCall__Inputs(this);
  }

  get outputs(): ModifyMarginCall__Outputs {
    return new ModifyMarginCall__Outputs(this);
  }
}

export class ModifyMarginCall__Inputs {
  _call: ModifyMarginCall;

  constructor(call: ModifyMarginCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get shouldIncrease(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ModifyMarginCall__Outputs {
  _call: ModifyMarginCall;

  constructor(call: ModifyMarginCall) {
    this._call = call;
  }
}

export class OpenPositionCall extends ethereum.Call {
  get inputs(): OpenPositionCall__Inputs {
    return new OpenPositionCall__Inputs(this);
  }

  get outputs(): OpenPositionCall__Outputs {
    return new OpenPositionCall__Outputs(this);
  }
}

export class OpenPositionCall__Inputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get productId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get margin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get leverage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get oraclePrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class OpenPositionCall__Outputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }
}

export class PauseTradingCall extends ethereum.Call {
  get inputs(): PauseTradingCall__Inputs {
    return new PauseTradingCall__Inputs(this);
  }

  get outputs(): PauseTradingCall__Outputs {
    return new PauseTradingCall__Outputs(this);
  }
}

export class PauseTradingCall__Inputs {
  _call: PauseTradingCall;

  constructor(call: PauseTradingCall) {
    this._call = call;
  }
}

export class PauseTradingCall__Outputs {
  _call: PauseTradingCall;

  constructor(call: PauseTradingCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class SetAccountManagerCall extends ethereum.Call {
  get inputs(): SetAccountManagerCall__Inputs {
    return new SetAccountManagerCall__Inputs(this);
  }

  get outputs(): SetAccountManagerCall__Outputs {
    return new SetAccountManagerCall__Outputs(this);
  }
}

export class SetAccountManagerCall__Inputs {
  _call: SetAccountManagerCall;

  constructor(call: SetAccountManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAccountManagerCall__Outputs {
  _call: SetAccountManagerCall;

  constructor(call: SetAccountManagerCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeCalculator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _fundingManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetDistributorsCall extends ethereum.Call {
  get inputs(): SetDistributorsCall__Inputs {
    return new SetDistributorsCall__Inputs(this);
  }

  get outputs(): SetDistributorsCall__Outputs {
    return new SetDistributorsCall__Outputs(this);
  }
}

export class SetDistributorsCall__Inputs {
  _call: SetDistributorsCall;

  constructor(call: SetDistributorsCall) {
    this._call = call;
  }

  get _protocolRewardDistributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pikaRewardDistributor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vaultRewardDistributor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _vaultTokenReward(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetDistributorsCall__Outputs {
  _call: SetDistributorsCall;

  constructor(call: SetDistributorsCall) {
    this._call = call;
  }
}

export class SetGovCall extends ethereum.Call {
  get inputs(): SetGovCall__Inputs {
    return new SetGovCall__Inputs(this);
  }

  get outputs(): SetGovCall__Outputs {
    return new SetGovCall__Outputs(this);
  }
}

export class SetGovCall__Inputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }

  get _gov(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovCall__Outputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }
}

export class SetGuardianCall extends ethereum.Call {
  get inputs(): SetGuardianCall__Inputs {
    return new SetGuardianCall__Inputs(this);
  }

  get outputs(): SetGuardianCall__Outputs {
    return new SetGuardianCall__Outputs(this);
  }
}

export class SetGuardianCall__Inputs {
  _call: SetGuardianCall;

  constructor(call: SetGuardianCall) {
    this._call = call;
  }

  get _guardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGuardianCall__Outputs {
  _call: SetGuardianCall;

  constructor(call: SetGuardianCall) {
    this._call = call;
  }
}

export class SetLiquidatorCall extends ethereum.Call {
  get inputs(): SetLiquidatorCall__Inputs {
    return new SetLiquidatorCall__Inputs(this);
  }

  get outputs(): SetLiquidatorCall__Outputs {
    return new SetLiquidatorCall__Outputs(this);
  }
}

export class SetLiquidatorCall__Inputs {
  _call: SetLiquidatorCall;

  constructor(call: SetLiquidatorCall) {
    this._call = call;
  }

  get _liquidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetLiquidatorCall__Outputs {
  _call: SetLiquidatorCall;

  constructor(call: SetLiquidatorCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetMinMarginCall extends ethereum.Call {
  get inputs(): SetMinMarginCall__Inputs {
    return new SetMinMarginCall__Inputs(this);
  }

  get outputs(): SetMinMarginCall__Outputs {
    return new SetMinMarginCall__Outputs(this);
  }
}

export class SetMinMarginCall__Inputs {
  _call: SetMinMarginCall;

  constructor(call: SetMinMarginCall) {
    this._call = call;
  }

  get _minMargin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinMarginCall__Outputs {
  _call: SetMinMarginCall;

  constructor(call: SetMinMarginCall) {
    this._call = call;
  }
}

export class SetNextPriceManagerCall extends ethereum.Call {
  get inputs(): SetNextPriceManagerCall__Inputs {
    return new SetNextPriceManagerCall__Inputs(this);
  }

  get outputs(): SetNextPriceManagerCall__Outputs {
    return new SetNextPriceManagerCall__Outputs(this);
  }
}

export class SetNextPriceManagerCall__Inputs {
  _call: SetNextPriceManagerCall;

  constructor(call: SetNextPriceManagerCall) {
    this._call = call;
  }

  get _nextPriceManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetNextPriceManagerCall__Outputs {
  _call: SetNextPriceManagerCall;

  constructor(call: SetNextPriceManagerCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetParametersCall extends ethereum.Call {
  get inputs(): SetParametersCall__Inputs {
    return new SetParametersCall__Inputs(this);
  }

  get outputs(): SetParametersCall__Outputs {
    return new SetParametersCall__Outputs(this);
  }
}

export class SetParametersCall__Inputs {
  _call: SetParametersCall;

  constructor(call: SetParametersCall) {
    this._call = call;
  }

  get _maxShift(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minProfitTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _canUserStake(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _allowPublicLiquidator(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _exposureMultiplier(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _utilizationMultiplier(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxExposureMultiplier(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _liquidationBounty(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _liquidationThreshold(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _shiftDivider(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class SetParametersCall__Outputs {
  _call: SetParametersCall;

  constructor(call: SetParametersCall) {
    this._call = call;
  }
}

export class SetRewardRatioCall extends ethereum.Call {
  get inputs(): SetRewardRatioCall__Inputs {
    return new SetRewardRatioCall__Inputs(this);
  }

  get outputs(): SetRewardRatioCall__Outputs {
    return new SetRewardRatioCall__Outputs(this);
  }
}

export class SetRewardRatioCall__Inputs {
  _call: SetRewardRatioCall;

  constructor(call: SetRewardRatioCall) {
    this._call = call;
  }

  get _protocolRewardRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pikaRewardRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardRatioCall__Outputs {
  _call: SetRewardRatioCall;

  constructor(call: SetRewardRatioCall) {
    this._call = call;
  }
}

export class SetTradeEnabledCall extends ethereum.Call {
  get inputs(): SetTradeEnabledCall__Inputs {
    return new SetTradeEnabledCall__Inputs(this);
  }

  get outputs(): SetTradeEnabledCall__Outputs {
    return new SetTradeEnabledCall__Outputs(this);
  }
}

export class SetTradeEnabledCall__Inputs {
  _call: SetTradeEnabledCall;

  constructor(call: SetTradeEnabledCall) {
    this._call = call;
  }

  get _isTradeEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetTradeEnabledCall__Outputs {
  _call: SetTradeEnabledCall;

  constructor(call: SetTradeEnabledCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UpdateProductCall extends ethereum.Call {
  get inputs(): UpdateProductCall__Inputs {
    return new UpdateProductCall__Inputs(this);
  }

  get outputs(): UpdateProductCall__Outputs {
    return new UpdateProductCall__Outputs(this);
  }
}

export class UpdateProductCall__Inputs {
  _call: UpdateProductCall;

  constructor(call: UpdateProductCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _product(): UpdateProductCall_productStruct {
    return changetype<UpdateProductCall_productStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdateProductCall__Outputs {
  _call: UpdateProductCall;

  constructor(call: UpdateProductCall) {
    this._call = call;
  }
}

export class UpdateProductCall_productStruct extends ethereum.Tuple {
  get productToken(): Address {
    return this[0].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get isActive(): boolean {
    return this[3].toBoolean();
  }

  get openInterestLong(): BigInt {
    return this[4].toBigInt();
  }

  get openInterestShort(): BigInt {
    return this[5].toBigInt();
  }

  get minPriceChange(): BigInt {
    return this[6].toBigInt();
  }

  get weight(): BigInt {
    return this[7].toBigInt();
  }

  get reserve(): BigInt {
    return this[8].toBigInt();
  }
}

export class UpdateVaultCall extends ethereum.Call {
  get inputs(): UpdateVaultCall__Inputs {
    return new UpdateVaultCall__Inputs(this);
  }

  get outputs(): UpdateVaultCall__Outputs {
    return new UpdateVaultCall__Outputs(this);
  }
}

export class UpdateVaultCall__Inputs {
  _call: UpdateVaultCall;

  constructor(call: UpdateVaultCall) {
    this._call = call;
  }

  get _vault(): UpdateVaultCall_vaultStruct {
    return changetype<UpdateVaultCall_vaultStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateVaultCall__Outputs {
  _call: UpdateVaultCall;

  constructor(call: UpdateVaultCall) {
    this._call = call;
  }
}

export class UpdateVaultCall_vaultStruct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get shares(): BigInt {
    return this[3].toBigInt();
  }

  get stakingPeriod(): BigInt {
    return this[4].toBigInt();
  }
}
