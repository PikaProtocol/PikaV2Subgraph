// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimedReward extends ethereum.Event {
  get params(): ClaimedReward__Params {
    return new ClaimedReward__Params(this);
  }
}

export class ClaimedReward__Params {
  _event: ClaimedReward;

  constructor(event: ClaimedReward) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Reinvested extends ethereum.Event {
  get params(): Reinvested__Params {
    return new Reinvested__Params(this);
  }
}

export class Reinvested__Params {
  _event: Reinvested;

  constructor(event: Reinvested) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultFeeReward extends ethereum.SmartContract {
  static bind(address: Address): VaultFeeReward {
    return new VaultFeeReward("VaultFeeReward", address);
  }

  BASE(): BigInt {
    let result = super.call("BASE", "BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE", "BASE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", "PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimReward(): BigInt {
    let result = super.call("claimReward", "claimReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimReward", "claimReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeRewardPerTokenStored(): BigInt {
    let result = super.call(
      "cumulativeRewardPerTokenStored",
      "cumulativeRewardPerTokenStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_cumulativeRewardPerTokenStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeRewardPerTokenStored",
      "cumulativeRewardPerTokenStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimableReward(account: Address): BigInt {
    let result = super.call(
      "getClaimableReward",
      "getClaimableReward(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getClaimableReward(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimableReward",
      "getClaimableReward(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pikaPerp(): Address {
    let result = super.call("pikaPerp", "pikaPerp():(address)", []);

    return result[0].toAddress();
  }

  try_pikaPerp(): ethereum.CallResult<Address> {
    let result = super.tryCall("pikaPerp", "pikaPerp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reinvest(): BigInt {
    let result = super.call("reinvest", "reinvest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reinvest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reinvest", "reinvest():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokenBase(): BigInt {
    let result = super.call(
      "rewardTokenBase",
      "rewardTokenBase():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardTokenBase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardTokenBase",
      "rewardTokenBase():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _pikaPerp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardTokenBase(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get rewardToSend(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ReinvestCall extends ethereum.Call {
  get inputs(): ReinvestCall__Inputs {
    return new ReinvestCall__Inputs(this);
  }

  get outputs(): ReinvestCall__Outputs {
    return new ReinvestCall__Outputs(this);
  }
}

export class ReinvestCall__Inputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class ReinvestCall__Outputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }

  get reinvestAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetPikaPerpCall extends ethereum.Call {
  get inputs(): SetPikaPerpCall__Inputs {
    return new SetPikaPerpCall__Inputs(this);
  }

  get outputs(): SetPikaPerpCall__Outputs {
    return new SetPikaPerpCall__Outputs(this);
  }
}

export class SetPikaPerpCall__Inputs {
  _call: SetPikaPerpCall;

  constructor(call: SetPikaPerpCall) {
    this._call = call;
  }

  get _pikaPerp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPikaPerpCall__Outputs {
  _call: SetPikaPerpCall;

  constructor(call: SetPikaPerpCall) {
    this._call = call;
  }
}

export class UpdateRewardCall extends ethereum.Call {
  get inputs(): UpdateRewardCall__Inputs {
    return new UpdateRewardCall__Inputs(this);
  }

  get outputs(): UpdateRewardCall__Outputs {
    return new UpdateRewardCall__Outputs(this);
  }
}

export class UpdateRewardCall__Inputs {
  _call: UpdateRewardCall;

  constructor(call: UpdateRewardCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRewardCall__Outputs {
  _call: UpdateRewardCall;

  constructor(call: UpdateRewardCall) {
    this._call = call;
  }
}
