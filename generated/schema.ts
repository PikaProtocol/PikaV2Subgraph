// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vault entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vault entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vault", id.toString(), this);
  }

  static load(id: string): Vault | null {
    return store.get("Vault", id) as Vault | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userCount(): BigInt | null {
    let value = this.get("userCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set userCount(value: BigInt | null) {
    if (value === null) {
      this.unset("userCount");
    } else {
      this.set("userCount", Value.fromBigInt(value as BigInt));
    }
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get updatedAtTimestamp(): BigInt | null {
    let value = this.get("updatedAtTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAtTimestamp");
    } else {
      this.set("updatedAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get updatedAtBlockNumber(): BigInt | null {
    let value = this.get("updatedAtBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAtBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAtBlockNumber");
    } else {
      this.set("updatedAtBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get cap(): BigInt {
    let value = this.get("cap");
    return value.toBigInt();
  }

  set cap(value: BigInt) {
    this.set("cap", Value.fromBigInt(value));
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (value === null) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(value as BigInt));
    }
  }

  get staked(): BigInt | null {
    let value = this.get("staked");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set staked(value: BigInt | null) {
    if (value === null) {
      this.unset("staked");
    } else {
      this.set("staked", Value.fromBigInt(value as BigInt));
    }
  }

  get shares(): BigInt | null {
    let value = this.get("shares");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set shares(value: BigInt | null) {
    if (value === null) {
      this.unset("shares");
    } else {
      this.set("shares", Value.fromBigInt(value as BigInt));
    }
  }

  get stakingPeriod(): BigInt {
    let value = this.get("stakingPeriod");
    return value.toBigInt();
  }

  set stakingPeriod(value: BigInt) {
    this.set("stakingPeriod", Value.fromBigInt(value));
  }

  get redemptionPeriod(): BigInt {
    let value = this.get("redemptionPeriod");
    return value.toBigInt();
  }

  set redemptionPeriod(value: BigInt) {
    this.set("redemptionPeriod", Value.fromBigInt(value));
  }

  get maxDailyDrawdown(): BigInt {
    let value = this.get("maxDailyDrawdown");
    return value.toBigInt();
  }

  set maxDailyDrawdown(value: BigInt) {
    this.set("maxDailyDrawdown", Value.fromBigInt(value));
  }

  get cumulativePnl(): BigInt | null {
    let value = this.get("cumulativePnl");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativePnl(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativePnl");
    } else {
      this.set("cumulativePnl", Value.fromBigInt(value as BigInt));
    }
  }

  get cumulativeVolume(): BigInt | null {
    let value = this.get("cumulativeVolume");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeVolume(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativeVolume");
    } else {
      this.set("cumulativeVolume", Value.fromBigInt(value as BigInt));
    }
  }

  get cumulativeMargin(): BigInt | null {
    let value = this.get("cumulativeMargin");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeMargin(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativeMargin");
    } else {
      this.set("cumulativeMargin", Value.fromBigInt(value as BigInt));
    }
  }

  get positionCount(): BigInt | null {
    let value = this.get("positionCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set positionCount(value: BigInt | null) {
    if (value === null) {
      this.unset("positionCount");
    } else {
      this.set("positionCount", Value.fromBigInt(value as BigInt));
    }
  }

  get tradeCount(): BigInt | null {
    let value = this.get("tradeCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tradeCount(value: BigInt | null) {
    if (value === null) {
      this.unset("tradeCount");
    } else {
      this.set("tradeCount", Value.fromBigInt(value as BigInt));
    }
  }

  get txCount(): BigInt | null {
    let value = this.get("txCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set txCount(value: BigInt | null) {
    if (value === null) {
      this.unset("txCount");
    } else {
      this.set("txCount", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Product extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Product entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Product entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Product", id.toString(), this);
  }

  static load(id: string): Product | null {
    return store.get("Product", id) as Product | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feed(): Bytes {
    let value = this.get("feed");
    return value.toBytes();
  }

  set feed(value: Bytes) {
    this.set("feed", Value.fromBytes(value));
  }

  get maxLeverage(): BigInt {
    let value = this.get("maxLeverage");
    return value.toBigInt();
  }

  set maxLeverage(value: BigInt) {
    this.set("maxLeverage", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get maxExposure(): BigInt {
    let value = this.get("maxExposure");
    return value.toBigInt();
  }

  set maxExposure(value: BigInt) {
    this.set("maxExposure", Value.fromBigInt(value));
  }

  get openInterestLong(): BigInt {
    let value = this.get("openInterestLong");
    return value.toBigInt();
  }

  set openInterestLong(value: BigInt) {
    this.set("openInterestLong", Value.fromBigInt(value));
  }

  get openInterestShort(): BigInt {
    let value = this.get("openInterestShort");
    return value.toBigInt();
  }

  set openInterestShort(value: BigInt) {
    this.set("openInterestShort", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    return value.toBigInt();
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get liquidationThreshold(): BigInt {
    let value = this.get("liquidationThreshold");
    return value.toBigInt();
  }

  set liquidationThreshold(value: BigInt) {
    this.set("liquidationThreshold", Value.fromBigInt(value));
  }

  get liquidationBounty(): BigInt {
    let value = this.get("liquidationBounty");
    return value.toBigInt();
  }

  set liquidationBounty(value: BigInt) {
    this.set("liquidationBounty", Value.fromBigInt(value));
  }

  get minPriceChange(): BigInt {
    let value = this.get("minPriceChange");
    return value.toBigInt();
  }

  set minPriceChange(value: BigInt) {
    this.set("minPriceChange", Value.fromBigInt(value));
  }

  get reserve(): BigInt {
    let value = this.get("reserve");
    return value.toBigInt();
  }

  set reserve(value: BigInt) {
    this.set("reserve", Value.fromBigInt(value));
  }

  get cumulativePnl(): BigInt | null {
    let value = this.get("cumulativePnl");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativePnl(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativePnl");
    } else {
      this.set("cumulativePnl", Value.fromBigInt(value as BigInt));
    }
  }

  get cumulativeVolume(): BigInt | null {
    let value = this.get("cumulativeVolume");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeVolume(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativeVolume");
    } else {
      this.set("cumulativeVolume", Value.fromBigInt(value as BigInt));
    }
  }

  get cumulativeMargin(): BigInt | null {
    let value = this.get("cumulativeMargin");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeMargin(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativeMargin");
    } else {
      this.set("cumulativeMargin", Value.fromBigInt(value as BigInt));
    }
  }

  get positionCount(): BigInt | null {
    let value = this.get("positionCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set positionCount(value: BigInt | null) {
    if (value === null) {
      this.unset("positionCount");
    } else {
      this.set("positionCount", Value.fromBigInt(value as BigInt));
    }
  }

  get tradeCount(): BigInt | null {
    let value = this.get("tradeCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tradeCount(value: BigInt | null) {
    if (value === null) {
      this.unset("tradeCount");
    } else {
      this.set("tradeCount", Value.fromBigInt(value as BigInt));
    }
  }

  get createdAtTimestamp(): BigInt | null {
    let value = this.get("createdAtTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("createdAtTimestamp");
    } else {
      this.set("createdAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get createdAtBlockNumber(): BigInt | null {
    let value = this.get("createdAtBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAtBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("createdAtBlockNumber");
    } else {
      this.set("createdAtBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get updatedAtTimestamp(): BigInt | null {
    let value = this.get("updatedAtTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAtTimestamp");
    } else {
      this.set("updatedAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get updatedAtBlockNumber(): BigInt | null {
    let value = this.get("updatedAtBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAtBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAtBlockNumber");
    } else {
      this.set("updatedAtBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get productId(): BigInt {
    let value = this.get("productId");
    return value.toBigInt();
  }

  set productId(value: BigInt) {
    this.set("productId", Value.fromBigInt(value));
  }

  get leverage(): BigInt {
    let value = this.get("leverage");
    return value.toBigInt();
  }

  set leverage(value: BigInt) {
    this.set("leverage", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get oraclePrice(): BigInt {
    let value = this.get("oraclePrice");
    return value.toBigInt();
  }

  set oraclePrice(value: BigInt) {
    this.set("oraclePrice", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get liquidationPrice(): BigInt | null {
    let value = this.get("liquidationPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidationPrice");
    } else {
      this.set("liquidationPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get updatedAtTimestamp(): BigInt | null {
    let value = this.get("updatedAtTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAtTimestamp");
    } else {
      this.set("updatedAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get updatedAtBlockNumber(): BigInt | null {
    let value = this.get("updatedAtBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAtBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAtBlockNumber");
    } else {
      this.set("updatedAtBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get positionId(): BigInt {
    let value = this.get("positionId");
    return value.toBigInt();
  }

  set positionId(value: BigInt) {
    this.set("positionId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get productId(): BigInt {
    let value = this.get("productId");
    return value.toBigInt();
  }

  set productId(value: BigInt) {
    this.set("productId", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get leverage(): BigInt {
    let value = this.get("leverage");
    return value.toBigInt();
  }

  set leverage(value: BigInt) {
    this.set("leverage", Value.fromBigInt(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get tradeFee(): BigInt {
    let value = this.get("tradeFee");
    return value.toBigInt();
  }

  set tradeFee(value: BigInt) {
    this.set("tradeFee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Trade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Trade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Trade", id.toString(), this);
  }

  static load(id: string): Trade | null {
    return store.get("Trade", id) as Trade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get positionId(): BigInt {
    let value = this.get("positionId");
    return value.toBigInt();
  }

  set positionId(value: BigInt) {
    this.set("positionId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get productId(): BigInt {
    let value = this.get("productId");
    return value.toBigInt();
  }

  set productId(value: BigInt) {
    this.set("productId", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get leverage(): BigInt {
    let value = this.get("leverage");
    return value.toBigInt();
  }

  set leverage(value: BigInt) {
    this.set("leverage", Value.fromBigInt(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get entryPrice(): BigInt {
    let value = this.get("entryPrice");
    return value.toBigInt();
  }

  set entryPrice(value: BigInt) {
    this.set("entryPrice", Value.fromBigInt(value));
  }

  get closePrice(): BigInt {
    let value = this.get("closePrice");
    return value.toBigInt();
  }

  set closePrice(value: BigInt) {
    this.set("closePrice", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get pnl(): BigInt {
    let value = this.get("pnl");
    return value.toBigInt();
  }

  set pnl(value: BigInt) {
    this.set("pnl", Value.fromBigInt(value));
  }

  get pnlIsNegative(): boolean {
    let value = this.get("pnlIsNegative");
    return value.toBoolean();
  }

  set pnlIsNegative(value: boolean) {
    this.set("pnlIsNegative", Value.fromBoolean(value));
  }

  get wasLiquidated(): boolean {
    let value = this.get("wasLiquidated");
    return value.toBoolean();
  }

  set wasLiquidated(value: boolean) {
    this.set("wasLiquidated", Value.fromBoolean(value));
  }

  get isFullClose(): boolean {
    let value = this.get("isFullClose");
    return value.toBoolean();
  }

  set isFullClose(value: boolean) {
    this.set("isFullClose", Value.fromBoolean(value));
  }

  get tradeFee(): BigInt {
    let value = this.get("tradeFee");
    return value.toBigInt();
  }

  set tradeFee(value: BigInt) {
    this.set("tradeFee", Value.fromBigInt(value));
  }

  get interestFee(): BigInt {
    let value = this.get("interestFee");
    return value.toBigInt();
  }

  set interestFee(value: BigInt) {
    this.set("interestFee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class VaultDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VaultDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VaultDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VaultDayData", id.toString(), this);
  }

  static load(id: string): VaultDayData | null {
    return store.get("VaultDayData", id) as VaultDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get cumulativePnl(): BigInt | null {
    let value = this.get("cumulativePnl");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativePnl(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativePnl");
    } else {
      this.set("cumulativePnl", Value.fromBigInt(value as BigInt));
    }
  }

  get cumulativeVolume(): BigInt | null {
    let value = this.get("cumulativeVolume");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeVolume(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativeVolume");
    } else {
      this.set("cumulativeVolume", Value.fromBigInt(value as BigInt));
    }
  }

  get cumulativeMargin(): BigInt | null {
    let value = this.get("cumulativeMargin");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeMargin(value: BigInt | null) {
    if (value === null) {
      this.unset("cumulativeMargin");
    } else {
      this.set("cumulativeMargin", Value.fromBigInt(value as BigInt));
    }
  }

  get positionCount(): BigInt | null {
    let value = this.get("positionCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set positionCount(value: BigInt | null) {
    if (value === null) {
      this.unset("positionCount");
    } else {
      this.set("positionCount", Value.fromBigInt(value as BigInt));
    }
  }

  get tradeCount(): BigInt | null {
    let value = this.get("tradeCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tradeCount(value: BigInt | null) {
    if (value === null) {
      this.unset("tradeCount");
    } else {
      this.set("tradeCount", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stake", id.toString(), this);
  }

  static load(id: string): Stake | null {
    return store.get("Stake", id) as Stake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get shares(): BigInt | null {
    let value = this.get("shares");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set shares(value: BigInt | null) {
    if (value === null) {
      this.unset("shares");
    } else {
      this.set("shares", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userNumber(): BigInt | null {
    let value = this.get("userNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set userNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("userNumber");
    } else {
      this.set("userNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get createdAtTimestamp(): BigInt | null {
    let value = this.get("createdAtTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("createdAtTimestamp");
    } else {
      this.set("createdAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get aveDepositTimestamp(): BigInt | null {
    let value = this.get("aveDepositTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set aveDepositTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("aveDepositTimestamp");
    } else {
      this.set("aveDepositTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get depositAmount(): BigInt | null {
    let value = this.get("depositAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set depositAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("depositAmount");
    } else {
      this.set("depositAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get withdrawAmount(): BigInt | null {
    let value = this.get("withdrawAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set withdrawAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("withdrawAmount");
    } else {
      this.set("withdrawAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get shares(): BigInt | null {
    let value = this.get("shares");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set shares(value: BigInt | null) {
    if (value === null) {
      this.unset("shares");
    } else {
      this.set("shares", Value.fromBigInt(value as BigInt));
    }
  }

  get aveStakedShares(): BigInt | null {
    let value = this.get("aveStakedShares");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set aveStakedShares(value: BigInt | null) {
    if (value === null) {
      this.unset("aveStakedShares");
    } else {
      this.set("aveStakedShares", Value.fromBigInt(value as BigInt));
    }
  }
}
