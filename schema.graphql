type Vault @entity {

  id: ID! # 1

  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  updatedAtTimestamp: BigInt
  updatedAtBlockNumber: BigInt

  cap: BigInt!
  balance: BigInt!
  staked: BigInt!
  shares: BigInt!
  stakingPeriod: BigInt!

  cumulativePnl: BigInt!
  cumulativeVolume: BigInt!
  cumulativeMargin: BigInt!
  cumulativeFee: BigInt

  positionCount: BigInt!
  tradeCount: BigInt!
  txCount: BigInt!
  liquidationCount: BigInt!
  userCount: BigInt!

  protocolReward: BigInt!
  pikaReward: BigInt!
  vaultReward: BigInt!


}

type Product @entity {
  id: ID! # product id

  productToken: Bytes!
  maxLeverage: BigInt!
  fee: BigInt!

  isActive: Boolean!

  openInterestLong: BigInt!
  openInterestShort: BigInt!

  minPriceChange: BigInt!
  weight: BigInt!
  reserve: BigInt!

  cumulativePnl: BigInt!
  cumulativeVolume: BigInt!
  cumulativeMargin: BigInt!

  positionCount: BigInt!
  tradeCount: BigInt!

  createdAtTimestamp: BigInt
  createdAtBlockNumber: BigInt

  updatedAtTimestamp: BigInt
  updatedAtBlockNumber: BigInt

}

type Position @entity { # open position

  id: ID! # position ID

  productId: BigInt!
  leverage: BigInt!
  price: BigInt!
  oraclePrice: BigInt!
  margin: BigInt!

  amount: BigInt!

  owner: Bytes!

  liquidationPrice: BigInt

  isLong: Boolean!

  funding: BigInt

  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  updatedAtTimestamp: BigInt
  updatedAtBlockNumber: BigInt

}

type Transaction @entity { # open or close

  id: ID! # transactionId

  txHash: String! # event.transaction.hash.toHexString()

  positionId: BigInt!

  owner: Bytes!

  productId: BigInt!
  margin: BigInt!
  singleMargin: BigInt!
  leverage: BigInt!
  singleLeverage: BigInt!

  amount: BigInt!
  singleAmount: BigInt!

  price: BigInt!

  isLong: Boolean!

  tradeFee: BigInt!

  pnl: BigInt
  wasLiquidated: Boolean

  timestamp: BigInt!
  blockNumber: BigInt!

  count: BigInt
}

type User @entity {
  id: ID! # user address
  userNumber: BigInt!
  createdAtTimestamp: BigInt
  aveDepositTimestamp: BigInt!
  depositAmount: BigInt!
  withdrawAmount: BigInt!
  shares: BigInt!
  aveStakedShares: BigInt!
  reward: BigInt!
  remainingAmount: BigInt!
  netAmount: BigInt!
  netAmountWithReward: BigInt!

  tradeCount: BigInt!
  volume: BigInt!
  fees: BigInt!
  pnl: BigInt!
}

type Trade @entity { # closed position

  id: ID! # unique: vault.tradeCount.toString()

  txHash: String! # event.transaction.hash.toHexString()

  positionId: BigInt!

  owner: Bytes!

  productId: BigInt!
  margin: BigInt!
  leverage: BigInt!

  amount: BigInt

  entryPrice: BigInt!
  closePrice: BigInt!

  isLong: Boolean!

  pnl: BigInt!

  pnlIsNegative: Boolean!
  wasLiquidated: Boolean!
  isFullClose: Boolean!

  tradeFee: BigInt!
  fundingPayment: BigInt!

  timestamp: BigInt!
  blockNumber: BigInt!

}

type Liquidation @entity {

  id: ID! # liquidation count

  txHash: String! # event.transaction.hash.toHexString()

  positionId: BigInt!

  liquidator: Bytes!

  liquidatorReward: BigInt!
  remainingReward: BigInt!

  timestamp: BigInt!
  blockNumber: BigInt!

}

type VaultDayData @entity {

  id: ID! # day id = event.block.timestamp / 86400 see https://github.com/Uniswap/uniswap-v3-subgraph/blob/1593a62059589bb1266d19bf18c5fa08fb68fe63/src/utils/intervalUpdates.ts#L43

  date: BigInt! # dayStartTimestamp = dayID * 86400

  cumulativePnl: BigInt!
  cumulativeVolume: BigInt!
  cumulativeMargin: BigInt!
  cumulativeFee: BigInt!

  positionCount: BigInt!
  tradeCount: BigInt!
  txCount: BigInt!
  liquidatorReward: BigInt!
  remainingReward: BigInt!
}

type Stake @entity {

  id: ID! #stakeId

  amount: BigInt!
  shares: BigInt!
  timestamp: BigInt

}

enum OrderStatus {
  open
  cancelled
  executed
}

type Order @entity {
  id: ID!

  type: String!
  account: String!
  status: OrderStatus!
  productId: BigInt!
  index: BigInt!
  margin: BigInt!
  leverage: BigInt!
  tradeFee: BigInt!
  size: BigInt!
  isLong: Boolean!
  isOpen: Boolean!
  triggerPrice: BigInt!
  triggerAboveThreshold: Boolean!
  executionFee: BigInt!

  createdTimestamp: Int!
  cancelledTimestamp: Int
  executedTimestamp: Int
}

type MarketOrder @entity {
  id: ID!

  account: String!
  status: OrderStatus!
  productId: BigInt!
  index: BigInt!
  margin: BigInt!
  leverage: BigInt!
  tradeFee: BigInt!
  size: BigInt!
  isLong: Boolean!
  isOpen: Boolean!
  acceptablePrice: BigInt!
  executionFee: BigInt!

  createdBlockNumber: Int!
  createdTimestamp: Int!
  executedBlockGap: Int
  executedTimeGap: Int
  cancelledBlockGap: Int
  cancelledTimeGap: Int
}

type OrderStat @entity {
  id: ID!

  createOpenTrigger: Int!
  createCloseTrigger: Int!

  cancelledOpenTrigger: Int!
  cancelledCloseTrigger: Int!

  executedOpenTrigger: Int!
  executedCloseTrigger: Int!

  createOpenMarket: Int!
  createCloseMarket: Int!

  cancelledOpenMarket: Int!
  cancelledCloseMarket: Int!

  executedOpenMarket: Int!
  executedCloseMarket: Int!
}

type Activity @entity {
  id: ID!

  account: String!
  action: String!
  type: String
  productId: BigInt!
  margin: BigInt
  size: BigInt
  isLong: Boolean
  isOpen: Boolean
  price: BigInt
  triggerPrice: BigInt
  triggerAboveThreshold: Boolean
  acceptablePrice: BigInt
  txHash: String!
  timestamp: BigInt!
}



